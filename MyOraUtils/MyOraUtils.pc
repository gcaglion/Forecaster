////#include <vld.h>

#include <MyOraUtils.h>
#include <sqlca.h>

#undef EXPORT
#ifdef __cplusplus
#define EXPORT extern "C" __declspec(dllexport)
#else
#define EXPORT __declspec(dllexport)
#endif

#define MAX_CONTEXTS 6
// Forecast High/Low (replaces OutputType)
#define FH 1	
#define FL 0

//--
char* __stdcall timestamp_C(){
	char* ftime;
	time_t ltime; // calendar time 
	HANDLE TimeMutex;

	TimeMutex = CreateMutex(NULL, TRUE, NULL);
	WaitForSingleObject(TimeMutex, INFINITE);
	ltime = time(NULL); // get current cal time 
	ftime = asctime(localtime(&ltime));
	ftime[strlen(ftime)-1] = '\0';
	ReleaseMutex(TimeMutex);

	return (ftime);
}
void  __stdcall Trim_C(char* str){
	int l = 0;
	int i;
	int r = (int)strlen(str);
	char ret[MAX_PATH];
	while (isspace(str[l])>0) l++;
	while (isspace(str[r - 1])>0) r--;
	for (i = 0; i<(r - l); i++) ret[i] = str[l + i];
	ret[r - l] = '\0';
	strcpy(str, ret);
}
void  __stdcall LogWrite_C(tDebugInfo* DebugParms, int LogType, char* msg, int argcount, ...){
	// pLogLevel=	0 (No screen, No file) | 1 (Screen, No file) | 2 (Screen AND File)
	int n;
	char*			arg_s;
	int				arg_d;
	double			arg_f;
	//long			arg_l;
	va_list			arguments;
	//char*			submsg=(char*)malloc(strlen(msg));
	char submsg[MAX_PATH];
	char fullfname[MAX_PATH];
	unsigned int	im = 0;
	int				prev_im = 0;
	//HANDLE			FileMutex;
	//HANDLE			ScreenMutex;

	if (DebugParms->DebugLevel == 0 && LogType == LOG_INFO) return;
	//if (DebugParms->DebugLevel >1){
	if (DebugParms->fIsOpen != 1){
		strcpy(fullfname, DebugParms->fPath); strcat(fullfname, "/"); strcat(fullfname, DebugParms->fName);
		DebugParms->fHandle = fopen(fullfname, "w");
		DebugParms->fIsOpen = 1;
	}
	//}

	va_start(arguments, argcount);
	n = 0;

	//ScreenMutex=CreateMutex(NULL, FALSE, NULL);
	//FileMutex=  CreateMutex(NULL, FALSE, NULL);

	//	while(FileMutex==NULL) FileMutex=CreateMutex(NULL, TRUE, NULL);
	//	WaitForSingleObject(FileMutex, INFINITE);

	do {
		if (msg[im] == 37){                // "%"
			memcpy(submsg, &msg[prev_im], (im - prev_im + 2)); submsg[im - prev_im + 2] = '\0';
			n++;
			prev_im = im + 2;
			if (msg[im + 1] == 115){   // "s"
				arg_s = va_arg(arguments, char*);
				if (DebugParms->DebugLevel == 1 || DebugParms->DebugLevel == 3 || LogType == LOG_ERROR) printf(submsg, arg_s);
				if (DebugParms->DebugLevel == 2 || DebugParms->DebugLevel == 3 || LogType == LOG_ERROR)	fprintf(DebugParms->fHandle, submsg, arg_s);
			}
			else if (msg[im + 1] == 100){   // "d"
				arg_d = va_arg(arguments, int);
				if (DebugParms->DebugLevel == 1 || DebugParms->DebugLevel == 3 || LogType == LOG_ERROR) printf(submsg, arg_d);
				if (DebugParms->DebugLevel == 2 || DebugParms->DebugLevel == 3 || LogType == LOG_ERROR)	fprintf(DebugParms->fHandle, submsg, arg_d);
			}
			else if (msg[im + 1] == 112){   // "p"
				arg_d = va_arg(arguments, long);
				if (DebugParms->DebugLevel == 1 || DebugParms->DebugLevel == 3 || LogType == LOG_ERROR) printf(submsg, arg_d);
				if (DebugParms->DebugLevel == 2 || DebugParms->DebugLevel == 3 || LogType == LOG_ERROR)	fprintf(DebugParms->fHandle, submsg, arg_d);
			}
			else                   {   // this could be 67 ("f") or any mask before "f" -> in any case, it's a double
				arg_f = va_arg(arguments, double);
				if (DebugParms->DebugLevel == 1 || DebugParms->DebugLevel == 3 || LogType == LOG_ERROR) printf(submsg, arg_f);
				if (DebugParms->DebugLevel == 2 || DebugParms->DebugLevel == 3 || LogType == LOG_ERROR)	fprintf(DebugParms->fHandle, submsg, arg_f);
			}
		}
		im++;
	} while (im<strlen(msg));

	memcpy(submsg, &msg[prev_im], (im - prev_im + 2)); submsg[im - prev_im + 2] = '\0';
	if (DebugParms->DebugLevel == 1 || DebugParms->DebugLevel == 3 || LogType == LOG_ERROR) printf(submsg);
	if (DebugParms->DebugLevel == 2 || DebugParms->DebugLevel == 3 || LogType == LOG_ERROR) fprintf(DebugParms->fHandle, submsg);
	if (LogType == LOG_ERROR && DebugParms->PauseOnError>0) {printf("Press any key..."); getchar();}
	va_end(arguments);
}
//--

//=== DB common functions
EXPORT int  __stdcall OraConnect(tDebugInfo* DebugInfo, tDBConnection* DBConnInfo){

	EXEC SQL BEGIN DECLARE SECTION;
	char* username = DBConnInfo->DBUser;
	char* password = DBConnInfo->DBPassword;
	char* dbstring = DBConnInfo->DBConnString;
	sql_context vCtx = NULL;
	EXEC SQL END DECLARE SECTION;

	//LogWrite_C(DebugParms, "%s About to execute connect with %s , %s , %s\n", 4, timestamp_C, pUserName, pPassword, pDBString);

	char* vPath = getenv("PATH");
	char* vOH = getenv("ORACLE_HOME");
	//printf("PATH=%s\nORACLE_HOME=%s\n", vPath, vOH);

	EXEC SQL CONTEXT ALLOCATE :vCtx;
	EXEC SQL CONTEXT USE :vCtx;
	EXEC SQL CONNECT :username IDENTIFIED BY :password USING :dbstring;

	if (sqlca.sqlcode == 0){
		//memcpy(DBConnInfo->Ctx, vCtx, sizeof(sql_context));
		DBConnInfo->DBCtx = vCtx;
		//DebugInfo->DBCtx = vCtx;
		LogWrite_C(DebugInfo, LOG_INFO, "OraConnect() - Connected to ORACLE as user: %s ; DBConnInfo->DBCtx=%p\n", 2, username, DBConnInfo->DBCtx);
	}
	else {
		LogWrite_C(DebugInfo, LOG_INFO, "PATH=%s\n", 1, vPath);
		LogWrite_C(DebugInfo, LOG_INFO, "ORACLE_HOME=%s\n", 1, vOH);
		LogWrite_C(DebugInfo, LOG_ERROR, "%s Error %d connecting to ORACLE as user: %s\n", 3, timestamp_C(), sqlca.sqlcode, DBConnInfo->DBUser);
	}
	return(sqlca.sqlcode);
}
EXPORT void __stdcall OraDisconnect(sql_context pCtx, int Commit) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = pCtx;
	EXEC SQL END   DECLARE SECTION;

	EXEC SQL CONTEXT USE : vCtx;
	if (Commit==0) {
		EXEC SQL ROLLBACK RELEASE;
	} else{
		EXEC SQL COMMIT WORK RELEASE;
	}
}
EXPORT void __stdcall OraCommit(void* pCtx) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = pCtx;
	EXEC SQL END   DECLARE SECTION;

	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL COMMIT;
}
//===

//=== Basic Logs
EXPORT int __stdcall Ora_InsertTradeInfo(tDebugInfo* pDebugParms, int pid, int pBarId, char* pLastBarT, double pLastBarO, double pLastBarH, double pLastBarL, double pLastBarC, char* pFirstBarT, double pFirstBarO, double pFirstBarH, double pFirstBarL, double pFirstBarC, double pPrevFH, double pPrevFL, double pCurrBid, double pCurrAsk, double pCurrFH, double pCurrFL, int pTradeType, double pTradeSize, double pTradeTP, double pTradeSL) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = pDebugParms->DebugDB->DBCtx;
	char stmt[1000];
	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(pDebugParms, pDebugParms->DebugDB) != 0) {
			printf("%s() could not connect to Log Database...\n", __func__);
			return -1;
		}
		vCtx = pDebugParms->DebugDB->DBCtx;
	}
	//-- Builds Insert statement
	sprintf(&stmt[0], "insert into TradeInfo(ProcessId, BarId, LastBarT, LastBarO, LastBarH, LastBarL, LastBarC, FirstBarT, FirstBarO, FirstBarH, FirstBarL, FirstBarC, PrevFH, PrevFL, CurrBid, CurrAsk, CurrFH, CurrFL, TradeType, TradeSize, TradeTP, TradeSL)\
										 values(%d, %d, to_date('%s','YYYYMMDDHH24MI'), %f, %f, %f, %f, to_date('%s','YYYYMMDDHH24MI'), %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %d, %f, %f, %f)",\
												pid, pBarId, pLastBarT, pLastBarO, pLastBarH, pLastBarL, pLastBarC, pFirstBarT, pFirstBarO, pFirstBarH, pFirstBarL, pFirstBarC, pPrevFH, pPrevFL, pCurrBid, pCurrAsk, pCurrFH, pCurrFL, pTradeType, pTradeSize, pTradeTP, pTradeSL);
	//-- Executes Insert statement
	LogWrite_C(pDebugParms, LOG_INFO, "%s() executing stmt = %s\n", 2, __func__, stmt);
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL EXECUTE IMMEDIATE : stmt;
	if (sqlca.sqlcode != 0) {
		if (sqlca.sqlcode != 1) LogWrite_C(pDebugParms, LOG_ERROR, "%s() failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}
	return 0;
}
EXPORT int __stdcall Ora_InsertClientInfo(tDebugInfo* DebugParms, int pid, char* clientName, int pSimulationLen, char* pSimulationStart, double pElapsedSecs, int pDoTraining, int pDoRun) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) {
			printf("%s() could not connect to Log Database...\n", __func__);
			return -1;
		}
		vCtx = DebugParms->DebugDB->DBCtx;
	}
	//-- Builds Insert statement
	sprintf(&stmt[0], "insert into ClientInfo(ProcessId, ClientName, ClientStart, SimulationLen, Duration, SimulationStart, DoTraining, DoRun) values(%d, '%s', sysdate, %d, %f, to_date('%s','YYYYMMDDHH24MI'), %d, %d)", pid, clientName, pSimulationLen, pElapsedSecs, pSimulationStart, pDoTraining, pDoRun);
	//-- Executes Insert statement
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL EXECUTE IMMEDIATE : stmt;
	if (sqlca.sqlcode != 0) {
		if (sqlca.sqlcode != 1) LogWrite_C(DebugParms, LOG_ERROR, "%s() failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}
	return 0;
}
EXPORT int __stdcall Ora_UpdateClientInfo(tDebugInfo* DebugParms, int pid, double pElapsedSecs) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) {
			printf("%s() could not connect to Log Database...\n", __func__);
			return -1;
		}
		vCtx = DebugParms->DebugDB->DBCtx;
	}
	//-- Builds Update statement
	sprintf(&stmt[0], "update ClientInfo set Duration=%f where processid=%d", pElapsedSecs, pid);
	//-- Executes Update statement
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL EXECUTE IMMEDIATE : stmt;
	if (sqlca.sqlcode != 0) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}
	return 0;
}

EXPORT int __stdcall Ora_InsertDataParms  (tDebugInfo* DebugParms, int pid, int pDatasetId, int pDSType, char* pDSFileName, char* pSymbol, char* pTimeFrame, int pIsFilled, int pBarData, int pDataTransformation, double pwiggleRoom, int pHistoryLen, int pSampleLen, int pPredictionLen) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	EXEC SQL END   DECLARE SECTION;

	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) LogWrite_C(DebugParms, LOG_ERROR, "Ora_InsertDataParms() could not connect to Log Database...\n", 0);
		vCtx = DebugParms->DebugDB->DBCtx;
	}
	LogWrite_C(DebugParms, LOG_INFO, "Ora_InsertDataParms() CheckPoint 2 - LogDB->DBCtx=%p , vCtx=%p\n", 2, DebugParms->DebugDB->DBCtx, vCtx);

	sprintf(&stmt[0], "insert into DataParms (ProcessId, DatasetId, DatasourceType, DatasourceFileName, Symbol, Timeframe, IsFilled, BarData, DataTransformation, WiggleRoom, HistoryLen, SampleLen, PredictionLen)\
					  values				(%d,			%d,		%d,				'%s',					'%s',		'%s',		%d,			%d,		%d,					%f,			%d,			%d,			%d)", \
		pid, pDatasetId, pDSType, pDSFileName, pSymbol, pTimeFrame, pIsFilled, pBarData, pDataTransformation, pwiggleRoom, pHistoryLen, pSampleLen, pPredictionLen);
	EXEC SQL EXECUTE IMMEDIATE : stmt;
	if (sqlca.sqlcode != 0) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}

	return 0;
}
EXPORT int __stdcall Ora_InsertEngineParms(tDebugInfo* DebugParms, int pid, int basepid, int pEngineType, int pInputCount, int pOutputCount, int pAdderCount, int pWNNDecompLevel, char* pWNNWaveletType) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	EXEC SQL END   DECLARE SECTION;

	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) LogWrite_C(DebugParms, LOG_ERROR, "Ora_InsertEngineParms() could not connect to Log Database...\n", 0);
		vCtx = DebugParms->DebugDB->DBCtx;
	}
	LogWrite_C(DebugParms, LOG_INFO, "Ora_InsertEngineParms() CheckPoint 2 - LogDB->DBCtx=%p , vCtx=%p\n", 2, DebugParms->DebugDB->DBCtx, vCtx);

	if (pAdderCount>0) {
		//-- Just Update AdderCount for existing record
		sprintf(&stmt[0], "update EngineParms set AdderCount=%d where ProcessId=%d", pAdderCount, basepid);
	} else {
		//-- Insert into EngineParms
		sprintf(&stmt[0], "insert into EngineParms(ProcessId, EngineType, InputCount, OutputCount, AdderCount, WNN_DecompLevel, WNN_WaveletType) values(%d, %d, %d, %d, %d, %d, '%s')", pid, pEngineType, pInputCount, pOutputCount, 0, pWNNDecompLevel, pWNNWaveletType);
	}
	EXEC SQL EXECUTE IMMEDIATE : stmt;
	if (sqlca.sqlcode != 0) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}

	return 0;
}
EXPORT int __stdcall Ora_InsertEngineThreads(tDebugInfo* DebugParms, int aid, int pid, int testid, tEngineDef* pEngineParms, tDataShape* pDataParms) {
	EXEC SQL BEGIN DECLARE SECTION;
	int l, c, d;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	EXEC SQL END   DECLARE SECTION;

	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) LogWrite_C(DebugParms, LOG_ERROR, "%s() could not connect to Log Database...\n", 1, __func__);
		vCtx = DebugParms->DebugDB->DBCtx;
	}
	LogWrite_C(DebugParms, LOG_INFO, "%s() CheckPoint 2 - LogDB->DBCtx=%p , vCtx=%p\n", 3, __func__, DebugParms->DebugDB->DBCtx, vCtx);

	//-- 1. Insert into EngineThreads
	for (l = 0; l < pEngineParms->LayersCount; l++) {
		for (c = 0; c < pEngineParms->CoresCount[l]; c++) {
			for (d = 0; d < pDataParms->DatasetsCount; d++) {
				sprintf(&stmt[0], "insert into EngineThreads(ProcessId, TestId, LayerId, CoreId, CoreType, DatasetId, ThreadId, BasePid, BaseTid, AdderId) values(%d, %d, %d, %d, %d, %d, %d, %d, %d, %d)", pid, testid, l, c, pEngineParms->Core[l][c].CoreType, d, pEngineParms->Core[l][c].CoreLog[d].ThreadId, pEngineParms->Core[l][c].CoreLog[d].MSEOutput->BaseProcessId, pEngineParms->Core[l][c].CoreLog[d].MSEOutput->BaseThreadId, aid);
				EXEC SQL EXECUTE IMMEDIATE : stmt;
				if (sqlca.sqlcode != 0) {
					LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
					return sqlca.sqlcode;
				}
			}
		}
	}

	return 0;
}
//--
EXPORT int __stdcall Ora_InsertCoreParms_NN (tDebugInfo* DebugParms, int aid, int pid, int lid, int cid, NN_Parms* NNParms) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) {
			printf("Ora_InsertCoreParms_NN could not connect to Log Database...\n");
			return -1;
		}
		vCtx = DebugParms->DebugDB->DBCtx;
	}
	//-- Builds Insert statement
	//sprintf(&stmt[0], "insert into CoreParms_NN(ProcessId, ThreadId, InputCount, OutputCount, LevelsCount, LevelRatioS, MaxEpochs, TargetMSE, UseContext, BP_Algo, TrainingProtocol, StopAtDivergence, LearningRate, LearningMomentum, ActivationFunction, HCPbeta, Mu) values(%d, %d, %d, %d, %d, '%s', %d, %f, %d, %d, %d, %d, %f, %f, %d, %f, %f)", pid, tid, NNParms->InputCount, NNParms->OutputCount, NNParms->LevelsCount, NNParms->LevelRatioS, NNParms->MaxEpochs, NNParms->TargetMSE, NNParms->UseContext, NNParms->BP_Algo, NNParms->TrainingProtocol, NNParms->StopAtDivergence, NNParms->LearningRate, NNParms->LearningMomentum, NNParms->ActivationFunction, NNParms->HCPbeta, NNParms->mu);
	sprintf(&stmt[0], "insert into CoreParms_NN(AdderId, ProcessId, LayerId, CoreId, InputCount, OutputCount, LevelsCount, LevelRatioS, MaxEpochs, TargetMSE, UseContext, BP_Algo, TrainingProtocol, StopAtDivergence, LearningRate, LearningMomentum, ActivationFunction, HCPbeta, Mu) values(%d, %d, %d, %d, %d, %d, %d, '%s', %d, %f, %d, %d, %d, %d, %f, %f, %d, %f, %f)", aid, pid, lid, cid, NNParms->InputCount, NNParms->OutputCount, NNParms->LevelsCount, NNParms->LevelRatioS, NNParms->MaxEpochs, NNParms->TargetMSE, NNParms->UseContext, NNParms->BP_Algo, NNParms->TrainingProtocol, NNParms->StopAtDivergence, NNParms->LearningRate, NNParms->LearningMomentum, NNParms->ActivationFunction, NNParms->HCPbeta, NNParms->mu);
	//-- Executes Insert statements
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL EXECUTE IMMEDIATE : stmt;
	if (sqlca.sqlcode != 0) {
		if (sqlca.sqlcode != 1) LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}
	return 0;
}
EXPORT int __stdcall Ora_InsertCoreParms_SOM(tDebugInfo* DebugParms, int aid, int pid, int lid, int cid, SOM_Parms* SOMParms) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) {
			printf("Ora_InsertCoreParms_SOM() could not connect to Log Database...\n");
			return -1;
		}
		vCtx = DebugParms->DebugDB->DBCtx;
	}
	//-- Builds Insert statement
	sprintf(&stmt[0], "insert into EngineParms_SOM	(AdderId, ProcessId, LayerId, CoreId, InputCount, OutputCount, MaxEpochs, TDFunction, BaseTD, LRFunction, BaseLR) values(%d, %d, %d, %d, %d, %d, %d, %d, %f, %d, %f )", aid, pid, lid, cid, SOMParms->InputCount, SOMParms->OutputCount, SOMParms->MaxEpochs, SOMParms->TDFunction, SOMParms->BaseTD, SOMParms->LRFunction, SOMParms->BaseLR);

	//-- Executes Insert statements
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL EXECUTE IMMEDIATE : stmt;
	if (sqlca.sqlcode != 0) {
		if (sqlca.sqlcode != 1) LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}
	return 0;

}
EXPORT int __stdcall Ora_InsertCoreParms_SVM(tDebugInfo* DebugParms, int aid, int pid, int lid, int cid, SVM_Parms* SVMParms) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) {
			printf("Ora_InsertCoreParms_SVM() could not connect to Log Database...\n");
			return -1;
		}
		vCtx = DebugParms->DebugDB->DBCtx;
	}
	//-- Builds Insert statement
	sprintf(&stmt[0], "insert into CoreParms_SVM	(AdderId, ProcessId, LayerId, CoreId, InputCount, MaxEpochs, C, Epsilon, IterToShrink, KernelType, PolyDegree, RBFGamma, CoefLin, CoefConst, KernelCacheSize)\
												 values(%d, %d, %d, %d, %d, %d, %f, %f, %d, %d, %d, %f, %f, %f, %d)",\
												aid, pid, lid, cid, SVMParms->InputCount, SVMParms->MaxEpochs, SVMParms->C, SVMParms->epsilon, SVMParms->svmIterToShrink, SVMParms->KernelType, SVMParms->PolyDegree, SVMParms->RBFGamma, SVMParms->CoefLin, SVMParms->CoefConst, SVMParms->KernelCacheSize);

	//-- Executes Insert statements
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL EXECUTE IMMEDIATE : stmt;
	if (sqlca.sqlcode != 0) {
		if (sqlca.sqlcode != 1) LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}
	return 0;

}
//--
EXPORT int __stdcall Ora_InsertCoreImage_NN(tDebugInfo* DebugParms, NN_Parms* NNParms, tNNWeight*** NNWeight0, tNNWeight*** NNWeight1) {
	EXEC SQL BEGIN DECLARE SECTION;
	int i, l, fn, tn;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	int vInsertCount = NNParms->WeightsCountTotal;
	int* vProcessId;
	int* vThreadId;
	int* vNeuronLevel;
	int* vFromNeuron;
	int* vToNeuron;
	double* vStartWeight; double* vEndWeight;
	double* vStartdW; double* vEnddW;
	double* vStartdJdW; double* vEnddJdW;
	double* vCtxValue;
	int dbl_type = 22;	// Oracle SQLT_BDOUBLE
	int int_type = 3;	// 
	unsigned int dbl_len = sizeof(double);
	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) printf("Ora_BulkWeightInsert_NN() could not connect to Log Database...\n");
		vCtx = DebugParms->DebugDB->DBCtx;
	}

	vProcessId = (int*)malloc(vInsertCount * sizeof(int));
	vThreadId = (int*)malloc(vInsertCount * sizeof(int));
	vNeuronLevel = (int*)malloc(vInsertCount * sizeof(int));
	vFromNeuron = (int*)malloc(vInsertCount * sizeof(int));
	vToNeuron = (int*)malloc(vInsertCount * sizeof(int));
	vStartWeight = (double*)malloc(vInsertCount * sizeof(double));
	vEndWeight = (double*)malloc(vInsertCount * sizeof(double));
	vStartdW = (double*)malloc(vInsertCount * sizeof(double));
	vEnddW = (double*)malloc(vInsertCount * sizeof(double));
	vStartdJdW = (double*)malloc(vInsertCount * sizeof(double));
	vEnddJdW = (double*)malloc(vInsertCount * sizeof(double));
	vCtxValue = (double*)malloc(vInsertCount * sizeof(double));

	i = 0;
	for (l = 0; l < (NNParms->LevelsCount - 1); l++) {
		for (fn = 0; fn < NNParms->NodesCount[l + 1]; fn++) {
			for (tn = 0; tn < NNParms->NodesCount[l]; tn++) {
				vProcessId[i] = NNWeight0[l][fn][tn].ProcessId;
				vThreadId[i] = NNWeight0[l][fn][tn].ThreadId;
				vNeuronLevel[i] = NNWeight0[l][fn][tn].NeuronLevel;
				vFromNeuron[i] = NNWeight0[l][fn][tn].FromNeuron;
				vToNeuron[i] = NNWeight0[l][fn][tn].ToNeuron;
				vStartWeight[i] = NNWeight0[l][fn][tn].Weight;
				vEndWeight[i] = NNWeight1[l][fn][tn].Weight;
				vStartdW[i] = NNWeight0[l][fn][tn].dW;
				vEnddW[i] = NNWeight1[l][fn][tn].dW;
				vStartdJdW[i] = NNWeight0[l][fn][tn].dJdW;
				vEnddJdW[i] = NNWeight1[l][fn][tn].dJdW;
				vCtxValue[i] = NNWeight0[l][fn][tn].CtxValue;
				i++;
			}
		}
	}
	//-- Then, Build the Insert statement
	sprintf(&stmt[0], "insert into CoreImage_NN (ProcessId, ThreadId, NeuronLevel, FromNeuron, ToNeuron, StartW, EndW, StartdW, EnddW, StartdJdW, EnddJdW, CtxValue)");
	strcat(stmt, " values(:WNN01, :WNN02, :WNN03, :WNN04, :WNN05, :WNN06, :WNN07, :WNN08, :WNN09, :WNN10, :WNN11, :WNN12)");

	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL FOR : vInsertCount ALLOCATE DESCRIPTOR 'WNN';
	EXEC SQL SET DESCRIPTOR 'WNN' COUNT = 12;
	EXEC SQL SET DESCRIPTOR 'WNN' VALUE 1 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'WNN' VALUE 2 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'WNN' VALUE 3 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'WNN' VALUE 4 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'WNN' VALUE 5 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'WNN' VALUE 6 TYPE = :dbl_type;
	EXEC SQL SET DESCRIPTOR 'WNN' VALUE 7 TYPE = :dbl_type;
	EXEC SQL SET DESCRIPTOR 'WNN' VALUE 8 TYPE = :dbl_type;
	EXEC SQL SET DESCRIPTOR 'WNN' VALUE 9 TYPE = :dbl_type;
	EXEC SQL SET DESCRIPTOR 'WNN' VALUE 10 TYPE = :dbl_type;
	EXEC SQL SET DESCRIPTOR 'WNN' VALUE 11 TYPE = :dbl_type;
	EXEC SQL SET DESCRIPTOR 'WNN' VALUE 12 TYPE = :dbl_type;

	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WNN' VALUE 1 DATA = : vProcessId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WNN' VALUE 2 DATA = : vThreadId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WNN' VALUE 3 DATA = : vNeuronLevel;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WNN' VALUE 4 DATA = : vFromNeuron;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WNN' VALUE 5 DATA = : vToNeuron;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WNN' VALUE 6 DATA = : vStartWeight;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WNN' VALUE 7 DATA = : vEndWeight;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WNN' VALUE 8 DATA = : vStartdW;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WNN' VALUE 9 DATA = : vEnddW;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WNN' VALUE 10 DATA = : vStartdJdW;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WNN' VALUE 11 DATA = : vEnddJdW;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WNN' VALUE 12 DATA = : vCtxValue;

	EXEC SQL PREPARE DynWNNs FROM : stmt;
	EXEC SQL FOR : vInsertCount EXECUTE DynWNNs USING DESCRIPTOR 'WNN';

	if (sqlca.sqlcode != 0) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}
	EXEC SQL DEALLOCATE DESCRIPTOR 'WNN';


	//-- free()s
	free(vProcessId);
	free(vThreadId);
	free(vNeuronLevel);
	free(vFromNeuron);
	free(vToNeuron);
	free(vStartWeight);
	free(vEndWeight);
	free(vStartdW);
	free(vEnddW);
	free(vStartdJdW);
	free(vEnddJdW);
	free(vCtxValue);

	return 0;

}
EXPORT int __stdcall Ora_InsertCoreImage_SOM(tDebugInfo* DebugParms, SOM_Parms* SOMParms, tSOMWeight** SOMWeight) {
	EXEC SQL BEGIN DECLARE SECTION;
	int i, fn, tn;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	int vInsertCount = SOMParms->InputCount*SOMParms->OutputCount;
	int* vProcessId;
	int* vThreadId;
	int* vFromNeuron;
	int* vToNeuron;
	double* vWeight;
	int dbl_type = 22;	// Oracle SQLT_BDOUBLE
	int int_type = 3;	// 
	unsigned int dbl_len = sizeof(double);
	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) printf("Ora_InsertCoreImage_SOM() could not connect to Log Database...\n");
		vCtx = DebugParms->DebugDB->DBCtx;
	}

	vProcessId = (int*)malloc(vInsertCount * sizeof(int));
	vThreadId = (int*)malloc(vInsertCount * sizeof(int));
	vFromNeuron = (int*)malloc(vInsertCount * sizeof(int));
	vToNeuron = (int*)malloc(vInsertCount * sizeof(int));
	vWeight = (double*)malloc(vInsertCount * sizeof(double));

	i = 0;
	for (fn = 0; fn < SOMParms->InputCount; fn++) {
		for (tn = 0; tn < SOMParms->OutputCount; tn++) {
			vProcessId[i] = SOMWeight[fn][tn].ProcessId;
			vThreadId[i] = SOMWeight[fn][tn].ThreadId;
			vFromNeuron[i] = SOMWeight[fn][tn].FromNeuron;
			vToNeuron[i] = SOMWeight[fn][tn].ToNeuron;
			vWeight[i] = SOMWeight[fn][tn].Weight;
			i++;
		}
	}
	//-- Then, Build the Insert statement
	sprintf(&stmt[0], "insert into CoreImage_SOM (ProcessId, ThreadId, NeuronLevel, FromNeuron, ToNeuron, Weight)");
	strcat(stmt, " values(:WSOM01, :WSOM02, :WSOM03, :WSOM04, :WSOM05)");

	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL FOR : vInsertCount ALLOCATE DESCRIPTOR 'WSOM';
	EXEC SQL SET DESCRIPTOR 'WSOM' COUNT = 5;
	EXEC SQL SET DESCRIPTOR 'WSOM' VALUE 1 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'WSOM' VALUE 2 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'WSOM' VALUE 3 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'WSOM' VALUE 4 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'WSOM' VALUE 5 TYPE = :dbl_type;

	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WSOM' VALUE 1 DATA = : vProcessId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WSOM' VALUE 2 DATA = : vThreadId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WSOM' VALUE 3 DATA = : vFromNeuron;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WSOM' VALUE 4 DATA = : vToNeuron;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WSOM' VALUE 5 DATA = : vWeight;

	EXEC SQL PREPARE DynWSOMs FROM : stmt;
	EXEC SQL FOR : vInsertCount EXECUTE DynWSOMs USING DESCRIPTOR 'WSOM';

	if (sqlca.sqlcode != 0) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}
	EXEC SQL DEALLOCATE DESCRIPTOR 'WSOM';


	//-- free()s
	free(vProcessId);
	free(vThreadId);
	free(vFromNeuron);
	free(vToNeuron);
	free(vWeight);

	return 0;

}
EXPORT int __stdcall Ora_InsertCoreImage_SVM(tDebugInfo* DebugParms, SVM_Parms* SVMParms, tSVMResult* SVMResult, tSVMWeight** SVMWeight) {
	EXEC SQL BEGIN DECLARE SECTION;
	int i, sv, var;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	int vInsertCount = (SVMParms->InputCount+1)*(SVMResult->SVcount-1);	// +1 is for alpha
	int* vProcessId;
	int* vThreadId;
	int* vSVId;
	int* vVarId;
	double* vWeight;
	int dbl_type = 22;	// Oracle SQLT_BDOUBLE
	int int_type = 3;	// 
	unsigned int dbl_len = sizeof(double);
	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) printf("Ora_InsertCoreImage_SVM() could not connect to Log Database...\n");
		vCtx = DebugParms->DebugDB->DBCtx;
	}
	LogWrite_C(DebugParms, LOG_INFO, "%s(): vInsertCount=%d\n", 2, __func__, vInsertCount);

	vProcessId = (int*)malloc(vInsertCount * sizeof(int));
	vThreadId = (int*)malloc(vInsertCount * sizeof(int));
	vSVId = (int*)malloc(vInsertCount * sizeof(int));
	vVarId = (int*)malloc(vInsertCount * sizeof(int));
	vWeight = (double*)malloc(vInsertCount * sizeof(double));

	i = 0;
	for (sv = 1; sv < SVMResult->SVcount; sv++) {
		for (var = 0; var <= SVMParms->InputCount; var++) {	// +1 is for alpha
			vProcessId[i] = SVMWeight[sv][var].ProcessId;
			vThreadId[i] = SVMWeight[sv][var].ThreadId;
			vSVId[i] = SVMWeight[sv][var].SVId;
			vVarId[i] = SVMWeight[sv][var].VarId;
			vWeight[i] = SVMWeight[sv][var].Weight;
			i++;
		}
	}

	//-- Then, Build the Insert statement
	sprintf(&stmt[0], "insert into CoreImage_SVM (ProcessId, ThreadId, SVId, VarId, Weight)");
	strcat(stmt, " values(:WSVM01, :WSVM02, :WSVM03, :WSVM04, :WSVM05)");

	EXEC SQL CONTEXT USE : vCtx;

	EXEC SQL ALTER SESSION SET EVENTS '10046 trace name context forever, level 8';
	EXEC SQL ALTER SESSION SET TRACEFILE_IDENTIFIER = "InsertCoreImageSVM";
	EXEC SQL ALTER SESSION SET SQL_TRACE = TRUE;

	EXEC SQL FOR : vInsertCount ALLOCATE DESCRIPTOR 'WSVM';
	EXEC SQL SET DESCRIPTOR 'WSVM' COUNT = 5;
	EXEC SQL SET DESCRIPTOR 'WSVM' VALUE 1 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'WSVM' VALUE 2 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'WSVM' VALUE 3 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'WSVM' VALUE 4 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'WSVM' VALUE 5 TYPE = :dbl_type;

	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WSVM' VALUE 1 DATA = : vProcessId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WSVM' VALUE 2 DATA = : vThreadId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WSVM' VALUE 3 DATA = : vSVId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WSVM' VALUE 4 DATA = : vVarId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'WSVM' VALUE 5 DATA = : vWeight;

	EXEC SQL PREPARE DynWSVMs FROM : stmt;
	EXEC SQL FOR : vInsertCount EXECUTE DynWSVMs USING DESCRIPTOR 'WSVM';

	if (sqlca.sqlcode != 0) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}
	EXEC SQL ALTER SESSION SET SQL_TRACE = FALSE;
	EXEC SQL DEALLOCATE DESCRIPTOR 'WSVM';


	//-- free()s
	free(vProcessId);
	free(vThreadId);
	free(vSVId);
	free(vVarId);
	free(vWeight);

	return 0;

}
//--
EXPORT int __stdcall Ora_InsertCoreLogs_NN(tDebugInfo* DebugParms, int BPAlgo, tCoreLog* NNLogs) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	int i;
	int vInsertCount;
	//-- Common
	int* vProcessId;
	int* vThreadId;
	//-- BP_SCGD
	int* vEpoch;
	int* vBPid;
	int* vK;
	double* vdelta;
	double* vmu;
	double* valpha;
	double* vbeta;
	double* vlambda;
	double* vlambdau;
	double* vrnorm;
	double* venorm;
	double* vcomp;
	//--
	EXEC SQL END DECLARE SECTION;

	//-- 1. Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) {
			printf("Ora_InsertCoreLogs_NN() could not connect to Log Database...\n");
			return -1;
		}
		vCtx = DebugParms->DebugDB->DBCtx;
	}

	//-- 2. set Context & allocate descriptor
	EXEC SQL CONTEXT USE : vCtx;

	//-- 3. insert common NN logs into CoreLogs_NN
	sprintf(&stmt[0], "insert into CoreLogs_NN(ProcessId, ThreadId, ActualEpochs) values(%d, %d, %d)", NNLogs->MSEOutput[0].ProcessId, NNLogs->MSEOutput[0].ThreadId, NNLogs->ActualEpochs);
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL EXECUTE IMMEDIATE : stmt;
	if (sqlca.sqlcode != 0) {
		if (sqlca.sqlcode != 1)	LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}

	if (DebugParms->SaveInternals>0) {
		//-- 4. Insert BP_Algo-dependent logs into CoreLogs_NN_<XXX>
		vInsertCount = NNLogs->IntCnt;
		EXEC SQL FOR : vInsertCount ALLOCATE DESCRIPTOR 'inCLNN';

		switch (BPAlgo) {
		case BP_QING:
			//-- 3.1. malloc() column arrays
			//-- 3.2. Assign struct fields to column arrays
			//-- 3.3. Build Array Insert statement
			return 0;
			break;
		case BP_QUICKPROP:
			//-- 3.1. malloc() column arrays
			//-- 3.2. Assign struct fields to column arrays
			//-- 3.3. Build Array Insert statement
			return 0;
			break;
		case BP_SCGD:
			//-- 4.1. malloc() column arrays
			vProcessId = (int*)malloc(vInsertCount * sizeof(int));
			vThreadId = (int*)malloc(vInsertCount * sizeof(int));
			vEpoch = (int*)malloc(vInsertCount * sizeof(int));
			vBPid = (int*)malloc(vInsertCount * sizeof(int));
			vK = (int*)malloc(vInsertCount * sizeof(int));
			vdelta = (double*)malloc(vInsertCount * sizeof(double));
			vmu = (double*)malloc(vInsertCount * sizeof(double));
			valpha = (double*)malloc(vInsertCount * sizeof(double));
			vbeta = (double*)malloc(vInsertCount * sizeof(double));
			vlambda = (double*)malloc(vInsertCount * sizeof(double));
			vlambdau = (double*)malloc(vInsertCount * sizeof(double));
			vrnorm = (double*)malloc(vInsertCount * sizeof(double));
			venorm = (double*)malloc(vInsertCount * sizeof(double));
			vcomp = (double*)malloc(vInsertCount * sizeof(double));

			//-- 4.2. Assign struct fields to column arrays
			for (i = 0; i < vInsertCount; i++) {
				vProcessId[i] = NNLogs->IntP[i].ProcessId;
				vThreadId[i] = NNLogs->IntP[i].ThreadId;
				vEpoch[i] = NNLogs->IntP[i].Epoch;
				vBPid[i] = NNLogs->IntP[i].BPid;
				vK[i] = NNLogs->IntP[i].K;
				vdelta[i] = NNLogs->IntP[i].delta;
				vmu[i] = NNLogs->IntP[i].mu;
				valpha[i] = NNLogs->IntP[i].alpha;
				vbeta[i] = NNLogs->IntP[i].beta;
				vlambda[i] = NNLogs->IntP[i].lambda;
				vlambdau[i] = NNLogs->IntP[i].lambdau;
				vrnorm[i] = NNLogs->IntP[i].rnorm;
				venorm[i] = NNLogs->IntP[i].enorm;
				vcomp[i] = NNLogs->IntP[i].comp;
			}

			//-- 4.3. Build Array Insert statement
			sprintf(&stmt[0], "insert into CoreLogs_NN_SCGD(ProcessId, ThreadId, Epoch, BPId, K, Delta, Mu, Alpha, Beta, Lambda, Lambdau, Rnorm, Enorm, Comp) values(:SCGD01, :SCGD02, :SCGD03, :SCGD04, :SCGD05, :SCGD06, :SCGD07, :SCGD08, :SCGD09, :SCGD10, :SCGD11, :SCGD12, :SCGD13, :SCGD14)");
			EXEC SQL SET DESCRIPTOR 'inCLNN' COUNT = 14;
			EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inCLNN' VALUE 1 DATA = : vProcessId;
			EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inCLNN' VALUE 2 DATA = : vThreadId;
			EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inCLNN' VALUE 3 DATA = : vEpoch;
			EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inCLNN' VALUE 4 DATA = : vBPid;
			EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inCLNN' VALUE 5 DATA = : vK;
			EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inCLNN' VALUE 6 DATA = : vdelta;
			EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inCLNN' VALUE 7 DATA = : vmu;
			EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inCLNN' VALUE 8 DATA = : valpha;
			EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inCLNN' VALUE 9 DATA = : vbeta;
			EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inCLNN' VALUE 10 DATA = : vlambda;
			EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inCLNN' VALUE 11 DATA = : vlambdau;
			EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inCLNN' VALUE 12 DATA = : vrnorm;
			EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inCLNN' VALUE 13 DATA = : venorm;
			EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inCLNN' VALUE 14 DATA = : vcomp;

			break;
		case BP_STD:
			return 0;
			break;
		}

		//-- 5. Execute Array Insert statement
		EXEC SQL PREPARE DynIns FROM : stmt;
		EXEC SQL FOR : vInsertCount EXECUTE DynIns USING DESCRIPTOR 'inCLNN';
		LogWrite_C(DebugParms, LOG_INFO, "Ora_InsertCoreLogs_NN() inserted %d rows.\n", 1, sqlca.sqlerrd[2]);
		if (sqlca.sqlcode != 0) {
			LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
			return sqlca.sqlcode;
		}
		//-- 6. free()s
		EXEC SQL DEALLOCATE DESCRIPTOR 'inCLNN';
		free(vProcessId); free(vThreadId); free(vEpoch); free(vBPid); free(vK); free(vdelta); free(vmu); free(valpha); free(vbeta); free(vlambda); free(vlambdau); free(vrnorm); free(venorm); free(vcomp);
	}

	return 0;
}
EXPORT int __stdcall Ora_InsertCoreLogs_SOM(tDebugInfo* DebugParms, int BPAlgo, int pInsertCount, tLogInt* IntLogs) {
	return 0;
}
EXPORT int __stdcall Ora_InsertCoreLogs_SVM(tDebugInfo* DebugParms, tSVMResult* SVMResult) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) {
			printf("Ora_InsertCoreLogs_SVM() could not connect to Log Database...\n");
			return -1;
		}
		vCtx = DebugParms->DebugDB->DBCtx;
	}
	//-- Builds Insert statement
	sprintf(&stmt[0], "insert into CoreLogs_SVM (ProcessId, ThreadId, ActualEpochs, SVCount, ThresholdB, maxdiff, L1loss, WVnorm, LEVnorm, KEvCount) values(%d, %d, %d, %d, %f, %f, %f, %f, %f, %d)", SVMResult->ProcessId, SVMResult->ThreadId, SVMResult->Iterations, SVMResult->SVcount, SVMResult->ThresholdB, SVMResult->maxdiff, SVMResult->L1loss, SVMResult->WVnorm, SVMResult->LEVnorm, SVMResult->KEvCount);

	//-- Executes Insert statements
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL EXECUTE IMMEDIATE : stmt;
	if (sqlca.sqlcode != 0) {
		//--
		FILE* errfile=fopen("C:/temp/Ora_InsertCoreLogs_SVM.err", "w");
		fprintf(errfile, "%s failed. SQL Error %d ; stmt = %s\n", __func__, sqlca.sqlcode, stmt);
		fprintf(errfile, "WVnorm=%f ; _isnan() returns %d\n", SVMResult->WVnorm, _isnan(SVMResult->WVnorm));
		fclose(errfile);
		//--
		if (sqlca.sqlcode != 1) LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}
	return 0;

}
//--
EXPORT int __stdcall Ora_BulkMSEInsert(tDebugInfo* DebugParms, int* pInsertCount, tLogMSE* MSEData){
	EXEC SQL BEGIN DECLARE SECTION;
	int i;
	int vInsertCount;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	//--
	int* vProcessId;
	int* vThreadId;
	//int* vAdderId;
	int* vEpoch;
	double* vMSE_T;
	double* vMSE_V;
	//--
	int dbl_type = 22;	// Oracle SQLT_BDOUBLE
	int int_type = 3;	// 
	unsigned int dbl_len = sizeof(double);
	unsigned int vchar_type = 96;
	unsigned int vchar_len = 12 + 1;

	EXEC SQL END   DECLARE SECTION;

	//-- Connects to DB only once
	LogWrite_C(DebugParms, LOG_INFO, "BulkMSEInsert() CheckPoint 1 - LogDB->DBCtx=%p\n", 1, DebugParms->DebugDB->DBCtx);

	if (vCtx == NULL){
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		vCtx = DebugParms->DebugDB->DBCtx;
	}
	LogWrite_C(DebugParms, LOG_INFO, "BulkMSEInsert() CheckPoint 2 - LogDB->DBCtx=%p , vCtx=%p\n", 2, DebugParms->DebugDB->DBCtx, vCtx);

	vInsertCount = (*pInsertCount);
	vProcessId = (int*)malloc(vInsertCount*sizeof(int));
	vThreadId = (int*)malloc(vInsertCount*sizeof(int));
	//vAdderId = (int*)malloc(vInsertCount*sizeof(int));
	vEpoch = (int*)malloc(vInsertCount*sizeof(int));
	vMSE_T = (double*)malloc(vInsertCount*sizeof(double));
	vMSE_V = (double*)malloc(vInsertCount*sizeof(double));

	for (i = 0; i < vInsertCount; i++){
		vProcessId[i] = MSEData[i].ProcessId;
		vThreadId[i] = MSEData[i].ThreadId;
		//vAdderId[i] = MSEData[i].AdderId;
		vEpoch[i] = MSEData[i].Epoch;
		vMSE_T[i] = MSEData[i].MSE_T;
		vMSE_V[i] = MSEData[i].MSE_V;
		//LogWrite_C(DebugParms, LOG_INFO, "BulkMSEInsert() CheckPoint 3.1 - vProcessId[%d][%d]=%d ; vThreadId[%d][%d]=%d ; vTestId[%d][%d]=%d ; vEpoch[%d][%d]=%d ; vMSE_T[%d][%d]=%f \n", 15, d, i, vProcessId[d][i], d, i, vThreadId[d][i], d, i, vTestId[d][i], d, i, vCoreId[d][i], d, i, vEpoch[d][i], d, i, vMSE_T[d][i]);
	}

	//-- Then, Build the Insert statement
	sprintf(&stmt[0], "insert into MyLog_MSE (ProcessId, ThreadId, Epoch, MSE_T, MSE_V) values(:P01, :P02, :P03, :P04, :P05)");
	LogWrite_C(DebugParms, LOG_INFO, "BulkMSEInsert() CheckPoint 4 - stmt='%s' ; pid[0]=%d ; tid[0]=%d\n", 3, stmt, vProcessId[0], vThreadId[0]);

	EXEC SQL CONTEXT USE :vCtx;
	//EXEC SQL ALTER SESSION SET EVENTS '10046 trace name context forever, level 4';
	//EXEC SQL ALTER SESSION SET SQL_TRACE = TRUE;
	EXEC SQL FOR :vInsertCount ALLOCATE DESCRIPTOR 'inMSE';
	EXEC SQL SET DESCRIPTOR 'inMSE' COUNT = 5;
	EXEC SQL FOR :vInsertCount SET DESCRIPTOR 'inMSE' VALUE 1 DATA = :vProcessId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inMSE' VALUE 2 DATA = : vThreadId;
	EXEC SQL FOR :vInsertCount SET DESCRIPTOR 'inMSE' VALUE 3 DATA = :vEpoch;
	EXEC SQL FOR :vInsertCount SET DESCRIPTOR 'inMSE' VALUE 4 DATA = :vMSE_T;
	EXEC SQL FOR :vInsertCount SET DESCRIPTOR 'inMSE' VALUE 5 DATA = :vMSE_V;
	EXEC SQL PREPARE DynIns FROM :stmt;
	EXEC SQL FOR :vInsertCount EXECUTE DynIns USING DESCRIPTOR 'inMSE';
	LogWrite_C(DebugParms, LOG_INFO, "BulkMSEInsert() CheckPoint 5\n", 0);
	//EXEC SQL ALTER SESSION SET SQL_TRACE = FALSE;

	//pInsertCount[vNetLevel] = sqlca.sqlerrd[2];
	LogWrite_C(DebugParms, LOG_INFO, "BulkMSEInsert() inserted %d rows.\n", 1, sqlca.sqlerrd[2]);
	if (sqlca.sqlcode != 0){
		if (sqlca.sqlcode != 1) LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}
	EXEC SQL DEALLOCATE DESCRIPTOR 'inMSE';

	//-- free()s
	free(vProcessId);
	free(vThreadId);
	free(vEpoch);
	free(vMSE_T);
	free(vMSE_V);

	return sqlca.sqlcode;
}
EXPORT int __stdcall Ora_BulkRunInsert(tDebugInfo* DebugParms, int* pInsertCount, int pHistoryLen, tLogRUN* RunData){
	//-- pHistoryLen only needed to know where to insert the "spacer"
	EXEC SQL BEGIN DECLARE SECTION;
	int i;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	int vInsertCount;
	char stmt[1000];
	//--
	int* vProcessId;
	int* vThreadId;
	int* vNetProcessId;
	int* vNetThreadId;
	//--
	int* vPos;
	double* vActual; double* vActual_TRS;
	double* vPredicted; double* vPredicted_TRS;
	double* vError; double* vError_TRS;
	double* vBarWidth;
	double* vErrorP;
	//-- indicator variables, to set NULL without the need for an update
	short* iActual; short* iActual_TRS;
	short* iPredicted; short* iPredicted_TRS;
	short* iError; short* iError_TRS;
	short* iBarWidth;
	short* iErrorP;
	//--
	int dbl_type = 22;	// Oracle SQLT_BDOUBLE
	int int_type = 3;	// 
	unsigned int dbl_len = sizeof(double);
	unsigned int vchar_type = 96;
	unsigned int vchar_len = 12 + 1;

	EXEC SQL END   DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL){
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) printf("Ora_BulkRunInsert() could not connect to Log Database...\n");
		vCtx = DebugParms->DebugDB->DBCtx;
	}

	vInsertCount = (*pInsertCount);

	vProcessId = (int*)malloc(vInsertCount*sizeof(int));
	vThreadId = (int*)malloc(vInsertCount*sizeof(int));
	vNetProcessId = (int*)malloc(vInsertCount*sizeof(int));
	vNetThreadId = (int*)malloc(vInsertCount*sizeof(int));
	vPos = (int*)malloc(vInsertCount*sizeof(int));
	vActual = (double*)malloc(vInsertCount*sizeof(double));
	vPredicted = (double*)malloc(vInsertCount*sizeof(double));
	vError = (double*)malloc(vInsertCount*sizeof(double));
	vActual_TRS = (double*)malloc(vInsertCount*sizeof(double));
	vPredicted_TRS = (double*)malloc(vInsertCount*sizeof(double));
	vError_TRS = (double*)malloc(vInsertCount*sizeof(double));
	vBarWidth = (double*)malloc(vInsertCount*sizeof(double));
	vErrorP = (double*)malloc(vInsertCount*sizeof(double));
	//-- indicators
	iActual = (short*)malloc(vInsertCount*sizeof(short));
	iPredicted = (short*)malloc(vInsertCount*sizeof(short));
	iError = (short*)malloc(vInsertCount*sizeof(short));
	iActual_TRS = (short*)malloc(vInsertCount*sizeof(short));
	iPredicted_TRS = (short*)malloc(vInsertCount*sizeof(short));
	iError_TRS = (short*)malloc(vInsertCount*sizeof(short));
	iBarWidth = (short*)malloc(vInsertCount*sizeof(short));
	iErrorP = (short*)malloc(vInsertCount*sizeof(short));

	for (i = 0; i < vInsertCount; i++){
		vProcessId[i] = RunData[i].ProcessId;
		vThreadId[i] = RunData[i].ThreadId;
		vNetProcessId[i] = RunData[i].NetProcessId;
		vNetThreadId[i] = RunData[i].NetThreadId;
		//--
		vPos[i] = RunData[i].Pos;
		vActual[i] = RunData[i].Actual;
		vPredicted[i] = RunData[i].Predicted;
		vError[i] = RunData[i].Error;
		vActual_TRS[i] = RunData[i].Actual_TRS;
		vPredicted_TRS[i] = RunData[i].Predicted_TRS;
		vError_TRS[i] = RunData[i].Error_TRS;
		vBarWidth[i] = RunData[i].BarWidth;
		vErrorP[i] = RunData[i].ErrorP;
		//-- indicators
		//strcpy(&stmt[0], "update MyLog_Run set Predicted=NULL, Error=NULL, PredictedC=NULL, ErrorC=NULL, BarWidth=NULL, ErrorP=NULL where Predicted=0");
		iPredicted[i] = (vPredicted_TRS[i]==EMPTY_VALUE) ? -1 : 0;
		iError[i] = (vPredicted_TRS[i]==EMPTY_VALUE || vActual_TRS[i]==EMPTY_VALUE) ? -1 : 0;
		iPredicted_TRS[i] = (vPredicted_TRS[i]==EMPTY_VALUE) ? -1 : 0;
		iError_TRS[i] = (vPredicted_TRS[i]==EMPTY_VALUE || vActual_TRS[i]==EMPTY_VALUE) ? -1 : 0;
		iActual[i] = (vActual_TRS[i]==EMPTY_VALUE) ? -1 : 0;
		iActual_TRS[i] = (vActual_TRS[i]==EMPTY_VALUE) ? -1 : 0;
		iBarWidth[i] = (vBarWidth[i]==0)? 1: 0;
		iErrorP[i] = (iError[i]==0 && iBarWidth[i]==0) ? 0 : -1;

/*
		iPredicted[i] = (vPredicted[i]==0) ? -1 : 0;
		iError[i] = (vPredicted[i]==0 || vActual[i]==0 || vActual_TRS[i]==EMPTY_VALUE) ? -1 : 0;
		iErrorP[i] = (vPredicted[i]==0 || vActual[i]==0) ? -1 : 0;
		iPredicted_TRS[i] = (vPredicted[i]==0) ? -1 : 0;
		iError_TRS[i] = (vPredicted[i]==0 || vActual_TRS[i]==EMPTY_VALUE) ? -1 : 0;
		iBarWidth[i] = (vPredicted[i]==0) ? -1 : 0;
		iActual[i] = (vActual_TRS[i]==EMPTY_VALUE) ? -1 : 0;
		iActual_TRS[i] = (vActual_TRS[i]==EMPTY_VALUE) ? -1 : 0;
*/
		//LogWrite_C(DebugParms, LOG_INFO, "vProcessId[%d][%d][%d]=%d , vThreadId[%d][%d][%d]=%d , vTestId[%d][%d][%d]=%d , vNetId[%d][%d][%d]=%d, vPos[%d][%d][%d]=%d \n", 20, d, n, i, vProcessId[n][i], d, n, i, vThreadId[n][i], d, n, i, vTestId[n][i], d, n, i, vNetId[n][i], d, n, i, vPos[n][i]);
	}
	//-- Then, Build the Insert statement
	sprintf(&stmt[0], "insert into MyLog_Run (ProcessId, ThreadId, NetProcessId, NetThreadId, Pos, Actual, Predicted, Error, ActualC, PredictedC, ErrorC, BarWidth, ErrorP)");
	strcat(stmt, " values(:Run1, :Run2, :Run3, :Run4, :Run5, :Run6, :Run7, :Run8, :Run9, :Run10, :Run11, :Run12, :Run13)");

	EXEC SQL CONTEXT USE :vCtx;

//	EXEC SQL ALTER SESSION SET EVENTS '10046 trace name context forever, level 8';
//	EXEC SQL ALTER SESSION SET TRACEFILE_IDENTIFIER = "BulkRunInsert";
//	EXEC SQL ALTER SESSION SET SQL_TRACE = TRUE;

	EXEC SQL FOR :vInsertCount ALLOCATE DESCRIPTOR 'inRun';
	EXEC SQL SET DESCRIPTOR 'inRun' VALUE 1 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'inRun' VALUE 2 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'inRun' VALUE 3 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'inRun' VALUE 4 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'inRun' VALUE 5 TYPE = :int_type;
	EXEC SQL SET DESCRIPTOR 'inRun' VALUE 6 TYPE = :dbl_type;
	EXEC SQL SET DESCRIPTOR 'inRun' VALUE 7 TYPE = :dbl_type;
	EXEC SQL SET DESCRIPTOR 'inRun' VALUE 8 TYPE = :dbl_type;
	EXEC SQL SET DESCRIPTOR 'inRun' VALUE 9 TYPE = :dbl_type;
	EXEC SQL SET DESCRIPTOR 'inRun' VALUE 10 TYPE = :dbl_type;
	EXEC SQL SET DESCRIPTOR 'inRun' VALUE 11 TYPE = :dbl_type;
	EXEC SQL SET DESCRIPTOR 'inRun' VALUE 12 TYPE = :dbl_type;
	EXEC SQL SET DESCRIPTOR 'inRun' VALUE 13 TYPE = :dbl_type;

	EXEC SQL SET DESCRIPTOR 'inRun' COUNT = 13;
	EXEC SQL FOR :vInsertCount SET DESCRIPTOR 'inRun' VALUE 1 DATA = :vProcessId;
	EXEC SQL FOR :vInsertCount SET DESCRIPTOR 'inRun' VALUE 2 DATA = :vThreadId;
	EXEC SQL FOR :vInsertCount SET DESCRIPTOR 'inRun' VALUE 3 DATA = :vNetProcessId;
	EXEC SQL FOR :vInsertCount SET DESCRIPTOR 'inRun' VALUE 4 DATA = :vNetThreadId;
	EXEC SQL FOR :vInsertCount SET DESCRIPTOR 'inRun' VALUE 5 DATA = :vPos;
	EXEC SQL FOR :vInsertCount SET DESCRIPTOR 'inRun' VALUE 6 DATA = :vActual,			INDICATOR = :iActual;
	EXEC SQL FOR :vInsertCount SET DESCRIPTOR 'inRun' VALUE 7 DATA = :vPredicted,		INDICATOR = :iPredicted;
	EXEC SQL FOR :vInsertCount SET DESCRIPTOR 'inRun' VALUE 8 DATA = :vError,			INDICATOR = :iError;
	EXEC SQL FOR :vInsertCount SET DESCRIPTOR 'inRun' VALUE 9 DATA = :vActual_TRS,		INDICATOR = :iActual_TRS;
	EXEC SQL FOR :vInsertCount SET DESCRIPTOR 'inRun' VALUE 10 DATA = :vPredicted_TRS,	INDICATOR = :iPredicted_TRS;
	EXEC SQL FOR :vInsertCount SET DESCRIPTOR 'inRun' VALUE 11 DATA = :vError_TRS,		INDICATOR = :iError_TRS;
	EXEC SQL FOR :vInsertCount SET DESCRIPTOR 'inRun' VALUE 12 DATA = :vBarWidth,		INDICATOR = :iBarWidth;
	EXEC SQL FOR :vInsertCount SET DESCRIPTOR 'inRun' VALUE 13 DATA = :vErrorP,			INDICATOR = :iErrorP;

	EXEC SQL PREPARE DynIns FROM :stmt;
	EXEC SQL FOR :vInsertCount EXECUTE DynIns USING DESCRIPTOR 'inRun';
	
//	EXEC SQL ALTER SESSION SET SQL_TRACE = FALSE;

	(*pInsertCount) = sqlca.sqlerrd[2];
	LogWrite_C(DebugParms, LOG_INFO, "BulkRunInsert() CheckPoint 3 - InsertCount=%d\n", 1, (*pInsertCount));
	LogWrite_C(DebugParms, LOG_INFO, "BulkRunInsert() CheckPoint 4 - sqlca.sqlcode=%d\n", 1, sqlca.sqlcode);
	if (sqlca.sqlcode != 0){
		if (sqlca.sqlcode != 1){
			LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		}
		return sqlca.sqlcode;
	}

	//-- Need to insert the spacer that is no longer created in MyNN.cpp
	sprintf(&stmt[0], "insert into MyLog_Run (ProcessId, ThreadId, NetProcessId, NetThreadId, Pos, Actual, Predicted, Error, ActualC, PredictedC, ErrorC) \
						  						values(%d, %d, %d, %d, %f, NULL, NULL, NULL, NULL, NULL, NULL)", \
												vProcessId[0], vThreadId[0], vNetProcessId[0], vNetThreadId[0], (vPos[pHistoryLen - 1] + 0.5) );
	EXEC SQL EXECUTE IMMEDIATE :stmt;
	if (sqlca.sqlcode != 0){
		if (sqlca.sqlcode != 1403){
			LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
			return sqlca.sqlcode;
		}
	}
	EXEC SQL DEALLOCATE DESCRIPTOR 'inRun';
/*
	=== NOT NEEDED ANYMORE. USING INDICATORS, INSTEAD

	//-- Fixing the '0' values on actual that mess up excel charts
	strcpy(&stmt[0], "update MyLog_Run set Predicted=NULL, Error=NULL, PredictedC=NULL, ErrorC=NULL, BarWidth=NULL, ErrorP=NULL where Predicted=0");
	EXEC SQL EXECUTE IMMEDIATE :stmt;
	if (sqlca.sqlcode != 0) {
		if (sqlca.sqlcode != 1403) {
			LogWrite_C(DebugParms, LOG_ERROR, "Updating 0s in MyLog_Run failed. SQL Error %d\n", 1, sqlca.sqlcode);
			return sqlca.sqlcode;
		}
	}

	strcpy(&stmt[0], "update MyLog_Run set Actual=NULL, ActualC=NULL, Error=NULL, ErrorP=NULL where Actual=0");
	EXEC SQL EXECUTE IMMEDIATE :stmt;
	if (sqlca.sqlcode != 0){
		if (sqlca.sqlcode != 1403){
			LogWrite_C(DebugParms, LOG_ERROR, "Updating 0s in MyLog_Run failed. SQL Error %d\n", 1, sqlca.sqlcode);
			return sqlca.sqlcode;
		}
	}
*/
	//-- free()s
	free(vProcessId);
	free(vThreadId);
	free(vNetProcessId);
	free(vNetThreadId);
	free(vPos);
	free(vActual);
	free(vPredicted);
	free(vError);
	free(vActual_TRS);
	free(vPredicted_TRS);
	free(vError_TRS);
	free(vBarWidth);
	free(vErrorP);
	free(iActual);
	free(iPredicted);
	free(iError);
	free(iActual_TRS);
	free(iPredicted_TRS);
	free(iError_TRS);
	free(iBarWidth);
	free(iErrorP);

	return 0;
}
//===

//=== Internals Logs (unused)
EXPORT int __stdcall Ora_BulkInternalsInsert_NN_aF(tDebugInfo* DebugParms, NN_Parms* NN, tCoreLog* NNLogs, int pid, int testid, int pDatasetsCount, int pTimeSteps, double****a, double**** F) {
	EXEC SQL BEGIN DECLARE SECTION;
	int d, l, t, j;
	int vInsertCount; int idx;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	int dbl_type = 22;	// Oracle SQLT_BDOUBLE
	int int_type = 3;	// 
	unsigned int dbl_len = sizeof(double);
	unsigned int vchar_type = 96;
	unsigned int vchar_len = 12 + 1;

	int* vProcessId;
	int* vThreadId;
	int* vTestId;
	int* vDatasetId;
	int* vLayerId;
	int* vTimeStepId;

	int* vNeuron;
	double*  vInVal;
	double*  vOutVal;

	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) LogWrite_C(DebugParms, LOG_ERROR, "Ora_BulkInternalsInsert_NN_W() could not connect to Log Database...\n", 0);
		vCtx = DebugParms->DebugDB->DBCtx;
	}

	//-- mallocs
	vInsertCount = 0; idx = 0;
	for (d = 0; d < pDatasetsCount; d++) {
		for (l = 0; l < NN->LevelsCount; l++) {
			for (t = 0; t < pTimeSteps; t++) {
				for (j = 0; j < NN->NodesCount[l]; j++) {
					vInsertCount++;
				}
			}
		}
	}
	vProcessId = (int*)malloc(vInsertCount * sizeof(int));
	vThreadId = (int*)malloc(vInsertCount * sizeof(int));
	vTestId = (int*)malloc(vInsertCount * sizeof(int));
	vDatasetId = (int*)malloc(vInsertCount * sizeof(int));
	vLayerId = (int*)malloc(vInsertCount * sizeof(int));
	vTimeStepId = (int*)malloc(vInsertCount * sizeof(int));
	vNeuron = (int*)malloc(vInsertCount * sizeof(int));
	vInVal = (double*)malloc(vInsertCount * sizeof(double));
	vOutVal = (double*)malloc(vInsertCount * sizeof(double));

	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL FOR : vInsertCount ALLOCATE DESCRIPTOR 'inINTN';

	//-- assignments
	for (d = 0; d < pDatasetsCount; d++) {
		for (l = 0; l < NN->LevelsCount; l++) {
			for (t = 0; t < pTimeSteps; t++) {
				for (j = 0; j < NN->NodesCount[l]; j++) {
					vProcessId[idx] = pid;
					vThreadId[idx] = 0;	// NNLogs->TrainingTid[d];
					vTestId[idx] = testid;
					vDatasetId[idx] = d;
					vLayerId[idx] = l;
					vTimeStepId[idx] = t;
					vNeuron[idx] = j;
					vInVal[idx] = a[d][l][t][j];
					vOutVal[idx] = F[d][l][t][j];

					idx++;
				}
			}
		}
	}
	//-- Then, Build the Insert statement
	sprintf(&stmt[0], "insert into Internals_NN_N (ProcessId, ThreadId, TestId, TimeStep, NeuronLevel, Neuron, INVal, OUTVal) values(:P01, :P02, :P03, :P04, :P05, :P06, :P07, :P08)");
	LogWrite_C(DebugParms, LOG_INFO, "BulkInternalsInsert() CheckPoint 4 - stmt='%s'\n", 1, stmt);

	EXEC SQL SET DESCRIPTOR 'inINTN' COUNT = 8;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inINTN' VALUE 1 DATA = : vProcessId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inINTN' VALUE 2 DATA = : vThreadId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inINTN' VALUE 3 DATA = : vTestId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inINTN' VALUE 4 DATA = : vTimeStepId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inINTN' VALUE 5 DATA = : vLayerId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inINTN' VALUE 6 DATA = : vNeuron;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inINTN' VALUE 7 DATA = : vInVal;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inINTN' VALUE 8 DATA = : vOutVal;
	EXEC SQL PREPARE DynIns FROM : stmt;
	EXEC SQL FOR : vInsertCount EXECUTE DynIns USING DESCRIPTOR 'inINTN';

	LogWrite_C(DebugParms, LOG_INFO, "Ora_BulkInternalsInsert_NN_N() inserted %d rows.\n", 1, sqlca.sqlerrd[2]);
	if (sqlca.sqlcode != 0) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}

	//-- free()s
	free(vProcessId);
	free(vThreadId);
	free(vTestId);
	free(vDatasetId);
	free(vLayerId);
	free(vTimeStepId);
	free(vNeuron);
	free(vInVal);
	free(vOutVal);

	EXEC SQL DEALLOCATE DESCRIPTOR 'inINTN';
	return 0;
}
EXPORT int __stdcall Ora_BulkInternalsInsert_NN_W(tDebugInfo* DebugParms, NN_Parms* NN, tCoreLog* NNLogs, int pid, int testid, int pDatasetsCount, int pTimeSteps, double***** W) {
	EXEC SQL BEGIN DECLARE SECTION;
	int d, l, t, j, i;
	int vInsertCount, idx;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	int dbl_type = 22;	// Oracle SQLT_BDOUBLE
	int int_type = 3;	// 
	unsigned int dbl_len = sizeof(double);
	unsigned int vchar_type = 96;
	unsigned int vchar_len = 12 + 1;

	int* vProcessId;
	int* vThreadId;
	int* vTestId;
	int* vDatasetId;
	int* vLayerId;
	int* vTimeStepId;
	int* vFromNeuron;
	int* vToNeuron;
	double* vWeight;

	EXEC SQL END   DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) LogWrite_C(DebugParms, LOG_ERROR, "Ora_BulkInternalsInsert_NN_W() could not connect to Log Database...\n", 0);
		vCtx = DebugParms->DebugDB->DBCtx;
	}

	//-- mallocs
	vInsertCount = 0; idx = 0;
	for (d = 0; d < pDatasetsCount; d++) {
		for (l = 0; l < (NN->LevelsCount - 1); l++) {
			for (t = 0; t < pTimeSteps; t++) {
				for (j = 0; j < NN->NodesCount[l + 1]; j++) {
					for (i = 0; i < NN->NodesCount[l]; i++) {
						vInsertCount++;
					}
				}
			}
		}
	}
	vProcessId = (int*)malloc(vInsertCount * sizeof(int));
	vThreadId = (int*)malloc(vInsertCount * sizeof(int));
	vTestId = (int*)malloc(vInsertCount * sizeof(int));
	vDatasetId = (int*)malloc(vInsertCount * sizeof(int));
	vLayerId = (int*)malloc(vInsertCount * sizeof(int));
	vTimeStepId = (int*)malloc(vInsertCount * sizeof(int));
	vFromNeuron = (int*)malloc(vInsertCount * sizeof(int));
	vToNeuron = (int*)malloc(vInsertCount * sizeof(int));
	vWeight = (double*)malloc(vInsertCount * sizeof(double));

	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL FOR : vInsertCount ALLOCATE DESCRIPTOR 'inINTW';

	//-- assignments
	for (d = 0; d < pDatasetsCount; d++) {
		for (l = 0; l < (NN->LevelsCount - 1); l++) {
			for (t = 0; t < pTimeSteps; t++) {
				for (j = 0; j < NN->NodesCount[l + 1]; j++) {
					for (i = 0; i < NN->NodesCount[l]; i++) {
						vProcessId[idx] = pid;
						vThreadId[idx] = 0;	// NNLogs->TrainingTid[d];
						vTestId[idx] = testid;
						vDatasetId[idx] = d;
						vLayerId[idx] = l;
						vTimeStepId[idx] = t;
						vFromNeuron[idx] = j;
						vToNeuron[idx] = i;
						vWeight[idx] = W[d][l][t][j][i];

						idx++;
					}
				}
			}
		}
	}

	//-- Then, Build the Insert statement
	sprintf(&stmt[0], "insert into Internals_NN_W (ProcessId, ThreadId, TestId, TimeStep, NeuronLevel, FromNeuron, ToNeuron, Weight) values(:P01, :P02, :P03, :P04, :P05, :P06, :P07, :P08)");
	LogWrite_C(DebugParms, LOG_INFO, "BulkInternalsInsert() CheckPoint 4 - stmt='%s'\n", 1, stmt);

	EXEC SQL SET DESCRIPTOR 'inINTW' COUNT = 8;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inINTW' VALUE 1 DATA = : vProcessId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inINTW' VALUE 2 DATA = : vThreadId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inINTW' VALUE 3 DATA = : vTestId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inINTW' VALUE 4 DATA = : vTimeStepId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inINTW' VALUE 5 DATA = : vLayerId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inINTW' VALUE 6 DATA = : vFromNeuron;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inINTW' VALUE 7 DATA = : vToNeuron;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inINTW' VALUE 8 DATA = : vWeight;
	EXEC SQL PREPARE DynIns FROM : stmt;
	EXEC SQL FOR : vInsertCount EXECUTE DynIns USING DESCRIPTOR 'inINTW';

	LogWrite_C(DebugParms, LOG_INFO, "Ora_BulkInternalsInsert_NN_W() inserted %d rows.\n", 1, sqlca.sqlerrd[2]);
	if (sqlca.sqlcode != 0) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}

	//-- free()s
	free(vProcessId);
	free(vThreadId);
	free(vTestId);
	free(vDatasetId);
	free(vLayerId);
	free(vTimeStepId);
	free(vFromNeuron);
	free(vToNeuron);
	free(vWeight);

	EXEC SQL DEALLOCATE DESCRIPTOR 'inINTW';
	return 0;
}
EXPORT int __stdcall Ora_BulkInternalsInsert_NN_P(tDebugInfo* DebugParms, NN_Parms* NN, tCoreLog* NNLogs, int pid, int testid, int pDatasetsCount, int pTimeSteps, tLogInt*** IntParms) {
	EXEC SQL BEGIN DECLARE SECTION;
	int d, l, t;
	int vInsertCount; int idx;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	int dbl_type = 22;	// Oracle SQLT_BDOUBLE
	int int_type = 3;	// 
	unsigned int dbl_len = sizeof(double);
	unsigned int vchar_type = 96;
	unsigned int vchar_len = 12 + 1;

	int* vProcessId;
	int* vThreadId;
	int* vTestId;
	int* vDatasetId;
	int* vLayerId;
	int* vTimeStepId;

	int* vsigma10;
	double* vro10;
	double* vD10W;
	double* vadzev10;
	int* vhcp10;
	int* vsigma21;
	double* vro21;
	double* vadzev21norm;
	double* vnorm_e;

	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) LogWrite_C(DebugParms, LOG_ERROR, "Ora_BulkInternalsInsert_NN_P() could not connect to Log Database...\n", 0);
		vCtx = DebugParms->DebugDB->DBCtx;
	}

	//-- mallocs
	vInsertCount = 0; idx = 0;
	for (d = 0; d < pDatasetsCount; d++) {
		l = 0;	// For now, all parameters are associated to layer 0
		for (t = 0; t < pTimeSteps; t++) {
			vInsertCount++;
		}
	}
	vProcessId = (int*)malloc(vInsertCount * sizeof(int));
	vThreadId = (int*)malloc(vInsertCount * sizeof(int));
	vTestId = (int*)malloc(vInsertCount * sizeof(int));
	vDatasetId = (int*)malloc(vInsertCount * sizeof(int));
	vLayerId = (int*)malloc(vInsertCount * sizeof(int));
	vTimeStepId = (int*)malloc(vInsertCount * sizeof(int));

	vsigma10 = (int*)malloc(vInsertCount * sizeof(int));
	vro10 = (double*)malloc(vInsertCount * sizeof(double));
	vD10W = (double*)malloc(vInsertCount * sizeof(double));
	vadzev10 = (double*)malloc(vInsertCount * sizeof(double));
	vhcp10 = (int*)malloc(vInsertCount * sizeof(int));
	vsigma21 = (int*)malloc(vInsertCount * sizeof(int));
	vro21 = (double*)malloc(vInsertCount * sizeof(double));
	vadzev21norm = (double*)malloc(vInsertCount * sizeof(double));
	vnorm_e = (double*)malloc(vInsertCount * sizeof(double));

	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL FOR : vInsertCount ALLOCATE DESCRIPTOR 'inNNP';

	//-- assignments
	for (d = 0; d < pDatasetsCount; d++) {
		l = 0;	// For now, all parameters are associated to layer 0
		for (t = 0; t < pTimeSteps; t++) {
			vProcessId[idx] = pid;
			vThreadId[idx] = 0;	// NNLogs->TrainingTid[d];
			vTestId[idx] = testid;
			vDatasetId[idx] = d;
			vLayerId[idx] = l;
			vTimeStepId[idx] = t;
			vadzev10[idx] = IntParms[d][l][t].adzev10;
			vadzev21norm[idx] = IntParms[d][l][t].adzev21N;
			vD10W[idx] = IntParms[d][l][t].D10W;
			vhcp10[idx] = IntParms[d][l][t].hcp10;
			vnorm_e[idx] = IntParms[d][l][t].norm_e;
			vProcessId[idx] = IntParms[d][l][t].ProcessId;
			vro10[idx] = IntParms[d][l][t].ro10;
			vro21[idx] = IntParms[d][l][t].ro21;
			vsigma10[idx] = IntParms[d][l][t].sigma10;
			vsigma21[idx] = IntParms[d][l][t].sigma21;
			vTimeStepId[idx] = IntParms[d][l][t].TimeStep;
			vThreadId[idx] = IntParms[d][l][t].ThreadId;

			idx++;
		}
	}
	//-- Then, Build the Insert statement
	sprintf(&stmt[0], "insert into Internals_NN_P (ProcessId, ThreadId, TestId, DatasetId, LayerId, TimeStep,\
					  					   sigma10, ro10, D10W, adzev10, hcp10, sigma21, ro21, adzev21norm, norm_e)\
										   					   values(:P01, :P02, :P03, :P04, :P05, :P06, :P07, :P08, :P09, :P10, :P11, :P12, :P13, :P14, :P15)");
	LogWrite_C(DebugParms, LOG_INFO, "BulkInternalsInsert() CheckPoint 4 - stmt='%s'\n", 1, stmt);

	EXEC SQL SET DESCRIPTOR 'inNNP' COUNT = 15;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inNNP' VALUE 1 DATA = : vProcessId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inNNP' VALUE 2 DATA = : vThreadId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inNNP' VALUE 3 DATA = : vTestId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inNNP' VALUE 4 DATA = : vDatasetId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inNNP' VALUE 5 DATA = : vLayerId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inNNP' VALUE 6 DATA = : vTimeStepId;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inNNP' VALUE 7 DATA = : vsigma10;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inNNP' VALUE 8 DATA = : vro10;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inNNP' VALUE 9 DATA = : vD10W;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inNNP' VALUE 10 DATA = : vadzev10;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inNNP' VALUE 11 DATA = : vhcp10;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inNNP' VALUE 12 DATA = : vsigma21;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inNNP' VALUE 13 DATA = : vro21;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inNNP' VALUE 14 DATA = : vadzev21norm;
	EXEC SQL FOR : vInsertCount SET DESCRIPTOR 'inNNP' VALUE 15 DATA = : vnorm_e;
	EXEC SQL PREPARE DynIns FROM : stmt;
	EXEC SQL FOR : vInsertCount EXECUTE DynIns USING DESCRIPTOR 'inNNP';

	LogWrite_C(DebugParms, LOG_INFO, "Ora_BulkInternalsInsert_NN_P() inserted %d rows.\n", 1, sqlca.sqlerrd[2]);
	if (sqlca.sqlcode != 0) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}

	//-- free()s
	free(vProcessId);
	free(vThreadId);
	free(vTestId);
	free(vDatasetId);
	free(vLayerId);
	free(vTimeStepId);
	free(vsigma10);
	free(vro10);
	free(vD10W);
	free(vadzev10);
	free(vhcp10);
	free(vsigma21);
	free(vro21);
	free(vadzev21norm);
	free(vnorm_e);

	EXEC SQL DEALLOCATE DESCRIPTOR 'inNNP';
	return 0;
}
//===

//=== Engine Load stuff
EXPORT int __stdcall Ora_LoadDataParms(tDebugInfo* DebugParms, int pid, tDataShape* oDataParms) {
	EXEC SQL BEGIN DECLARE SECTION;
	int ret;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	int vDScnt, vHistoryLen, vSampleLen, vPredictionLen, vDataTransformation;
	double vWiggleRoom;
	EXEC SQL END   DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) printf("%s() could not connect to Log Database...\n", __func__);
		vCtx = DebugParms->DebugDB->DBCtx;
	}

	sprintf(&stmt[0], "select HistoryLen, SampleLen, PredictionLen, DataTransformation, WiggleRoom from DataParms where ProcessId=%d", pid);
	LogWrite_C(DebugParms, LOG_INFO, "%s() CheckPoint 3 - stmt = %s\n", 2, __func__, stmt);

	//-- Executes SQL 
	vCtx = DebugParms->DebugDB->DBCtx;
	vDScnt = 0;
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL PREPARE s15 FROM : stmt;
	EXEC SQL DECLARE c15 CURSOR FOR s15;
	EXEC SQL OPEN c15;

	while (sqlca.sqlcode!= 1403) {
		EXEC SQL FETCH c15 INTO : vHistoryLen, : vSampleLen, : vPredictionLen, : vDataTransformation, : vWiggleRoom;
		if (sqlca.sqlcode!= 1403 && sqlca.sqlcode != 0) {
			LogWrite_C(DebugParms, LOG_ERROR, "%s(): SQL Error %d\n", 2, __func__, sqlca.sqlcode);
			return sqlca.sqlcode;
		}
		vDScnt++;
	}
	EXEC SQL CLOSE c15;
	ret = sqlca.sqlcode;

	//-- Fill oDataParms, and returns
	oDataParms->DatasetsCount = vDScnt-1;
	oDataParms->HistoryLen = vHistoryLen;
	oDataParms->SampleLen = vSampleLen;
	oDataParms->PredictionLen = vPredictionLen;
	oDataParms->DataTransformation = vDataTransformation;
	oDataParms->wiggleRoom = vWiggleRoom;
	LogWrite_C(DebugParms, LOG_INFO, "%s(): HistoryLen=%d ; SampleLen=%d ; PredictionLen=%d \n", 4, __func__, oDataParms->HistoryLen, oDataParms->SampleLen, oDataParms->PredictionLen);
	return ret;
}
EXPORT int __stdcall Ora_LoadEngineParms(tDebugInfo* DebugParms, int pid, tEngineDef* oEngineParms) {
	EXEC SQL BEGIN DECLARE SECTION;
	int ret;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	int vEngineType, vInputCount, vOutputCount, vAdderCount, vDecompLevel;
	char vWType[30];
	EXEC SQL END   DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) printf("%s() could not connect to Log Database...\n", __func__);
		vCtx = DebugParms->DebugDB->DBCtx;
	}

	sprintf(&stmt[0], "select EngineType, InputCount, OutputCount, AdderCount, WNN_DecompLevel, decode(WNN_WaveletType,NULL,'UNUSED',WNN_WaveletType) from EngineParms where ProcessId=%d", pid);
	LogWrite_C(DebugParms, LOG_INFO, "%s() CheckPoint 3 - stmt = %s\n", 2, __func__, stmt);

	//-- Executes SQL 
	vCtx = DebugParms->DebugDB->DBCtx;
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL PREPARE s16 FROM : stmt;
	EXEC SQL DECLARE c16 CURSOR FOR s16;
	EXEC SQL OPEN c16;
	if (sqlca.sqlcode != 0) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s(): SQL Error %d, stmt=%s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}
	EXEC SQL FETCH c16 INTO :vEngineType, :vInputCount, :vOutputCount, :vAdderCount, :vDecompLevel, :vWType;
	ret = sqlca.sqlcode;
	if (sqlca.sqlcode != 0) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s(): SQL Error %d, stmt=%s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}
	EXEC SQL CLOSE c16;
	ret = sqlca.sqlcode;

	//-- Fill oEngineParms, and returns
	oEngineParms->EngineType = vEngineType;
	oEngineParms->InputCount = vInputCount;
	oEngineParms->OutputCount = vOutputCount;
	oEngineParms->AdderCount = vAdderCount;
	if (vEngineType == ENGINE_WNN) {
		oEngineParms->WNN_DecompLevel = vDecompLevel;
		strcpy(oEngineParms->WNN_WaveletType, vWType);
	}
	LogWrite_C(DebugParms, LOG_INFO, "%s(): EngineType=%d ; InputCount=%d, OutputCount=%d, AdderCount=%d\n", 5, __func__, oEngineParms->EngineType, oEngineParms->InputCount, oEngineParms->OutputCount, oEngineParms->AdderCount);
	return ret;
}
//--
EXPORT int __stdcall Ora_LoadCoreParms_NN(tDebugInfo* DebugParms, int pid, int tid, NN_Parms* oNNParms) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	//-- Network Properties variables
	int vInputCount, vOutputCount, vUseContext, vMaxEpochs, vBP_Algo, vActivationFunction;
	char vLevelRatios[60];
	double vLearningRate, vLearningMomentum, vHCPBeta, vTargetMSE;
	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) printf("%s() could not connect to Log Database...\n", __func__);
		vCtx = DebugParms->DebugDB->DBCtx;
	}

	//sprintf(&stmt[0], "select InputCount, OutputCount, LevelRatioS, UseContext, MaxEpochs, BP_Algo, LearningRate, LearningMomentum, ActivationFunction, HCPBeta, TargetMSE from CoreParms_NN where ProcessId=%d and ThreadId=%d", pid, tid);
	sprintf(stmt, "select InputCount, OutputCount, LevelRatioS, UseContext, MaxEpochs, BP_Algo, LearningRate, LearningMomentum, ActivationFunction, HCPBeta, TargetMSE from coreparms_nn where(processid, layerid, coreid) = (select processid, layerid, coreid from enginethreads where processid=%d and threadid=%d)", pid, tid);
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL PREPARE sLEPNN FROM : stmt;
	EXEC SQL DECLARE cLEPNN CURSOR FOR sLEPNN;
	EXEC SQL OPEN cLEPNN;
	if (sqlca.sqlcode != 0) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s: SQL Error %d ; stmt=%s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}
	EXEC SQL FETCH cLEPNN INTO vInputCount, vOutputCount, vLevelRatios, vUseContext, vMaxEpochs, vBP_Algo, vLearningRate, vLearningMomentum, vActivationFunction, vHCPBeta, vTargetMSE;
	if (sqlca.sqlcode == 0) {
		oNNParms->InputCount = vInputCount; oNNParms->OutputCount = vOutputCount; oNNParms->UseContext = vUseContext; oNNParms->MaxEpochs = vMaxEpochs; oNNParms->BP_Algo = vBP_Algo; oNNParms->LearningRate = vLearningRate; oNNParms->LearningMomentum = vLearningMomentum; oNNParms->ActivationFunction = vActivationFunction; oNNParms->HCPbeta = vHCPBeta; oNNParms->TargetMSE = vTargetMSE;
		strcpy(oNNParms->LevelRatioS, vLevelRatios);
	} else if (sqlca.sqlcode == 1403) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s(): Core not found. ProcessId=%d ; ThreadId=%d\n", 3, __func__, pid, tid);
		return sqlca.sqlcode;
	} else {
		LogWrite_C(DebugParms, LOG_ERROR, "%s(): SQL Error %d in fetch\n", 2, __func__, sqlca.sqlcode);
		return sqlca.sqlcode;
	}
	EXEC SQL CLOSE cLEPNN;

	return 0;
}
EXPORT int __stdcall Ora_LoadCoreParms_SOM(tDebugInfo* DebugParms, int pid, int tid, SOM_Parms* oSOMParms) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	//-- SOM Properties variables
	int vInputCount, vOutputCount, vMaxEpochs, vTDFunction, vLRFunction;
	double vBaseTD, vBaseLR;
	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) printf("%s() could not connect to Log Database...\n", __func__);
		vCtx = DebugParms->DebugDB->DBCtx;
	}

	sprintf(&stmt[0], "select InputCount, OutputCount, MaxEpochs, TDFunction, BaseTD, LRFunction, BaseLR from CoreParms_SOM where(processid, layerid, coreid) = (select processid, layerid, coreid from enginethreads where processid=%d and threadid=%d)", pid, tid);
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL PREPARE sLEPSOM FROM : stmt;
	EXEC SQL DECLARE cLEPSOM CURSOR FOR sLEPSOM;
	EXEC SQL OPEN cLEPSOM;
	if (sqlca.sqlcode != 0) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s: SQL Error %d\n", 2, __func__, sqlca.sqlcode); {printf("Press any key..."); getchar();}
		return sqlca.sqlcode;
	}
	EXEC SQL FETCH cLEPSOM INTO vInputCount, vOutputCount, vMaxEpochs, vTDFunction, vBaseTD, vLRFunction, vBaseLR;
	if (sqlca.sqlcode == 0) {
		oSOMParms->InputCount = vInputCount; oSOMParms->OutputCount = vOutputCount; oSOMParms->MaxEpochs = vMaxEpochs; oSOMParms->TDFunction = vTDFunction; oSOMParms->BaseTD = vBaseTD; oSOMParms->LRFunction = vLRFunction; oSOMParms->BaseLR = vBaseLR;
	} else if (sqlca.sqlcode == 1403) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s(): Core not found. ProcessId=%d ; ThreadId=%d\n", 3, __func__, pid, tid);
		return sqlca.sqlcode;
	} else {
		LogWrite_C(DebugParms, LOG_ERROR, "%s(): SQL Error %d\n", 2, __func__, sqlca.sqlcode);
		return sqlca.sqlcode;
	}
	EXEC SQL CLOSE cLEPSOM;

	return 0;
}
EXPORT int __stdcall Ora_LoadCoreParms_SVM(tDebugInfo* DebugParms, int pid, int tid, SVM_Parms* oSVMParms) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	//-- SVM Properties variables
	int vInputCount, vMaxEpochs, vIterToShrink, vKernelType, vPolyDegree, vKernelCacheSize;
	double vC, vEpsilon, vRBFGamma, vCoefLin, vCoefConst;
	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) printf("%s() could not connect to Log Database...\n", __func__);
		vCtx = DebugParms->DebugDB->DBCtx;
	}

	sprintf(&stmt[0], "select InputCount, MaxEpochs, C, Epsilon, IterToShrink, KernelType, PolyDegree, RBFGamma, CoefLin, CoefConst, KernelCacheSize from CoreParms_SVM where(processid, layerid, coreid) = (select processid, layerid, coreid from enginethreads where processid=%d and threadid=%d)", pid, tid);
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL PREPARE sLEPSVM FROM : stmt;
	EXEC SQL DECLARE cLEPSVM CURSOR FOR sLEPSVM;
	EXEC SQL OPEN cLEPSVM;
	if (sqlca.sqlcode != 0) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s: SQL Error %d\n", 2, __func__, sqlca.sqlcode); 
		return sqlca.sqlcode;
	}
	EXEC SQL FETCH cLEPSVM INTO vInputCount, vMaxEpochs, vC, vEpsilon, vIterToShrink, vKernelType, vPolyDegree, vRBFGamma, vCoefLin, vCoefConst, vKernelCacheSize;
	if (sqlca.sqlcode == 0) {
		oSVMParms->InputCount = vInputCount; oSVMParms->MaxEpochs = vMaxEpochs; oSVMParms->C = vC; oSVMParms->epsilon = vEpsilon; oSVMParms->svmIterToShrink = vIterToShrink; oSVMParms->KernelType = vKernelType; oSVMParms->PolyDegree = vPolyDegree; oSVMParms->RBFGamma = vRBFGamma; oSVMParms->CoefLin = vCoefLin; oSVMParms->CoefConst = vCoefConst; oSVMParms->KernelCacheSize = vKernelCacheSize;
	} else if (sqlca.sqlcode == 1403) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s(): Core not found. ProcessId=%d ; ThreadId=%d\n", 3, __func__, pid, tid);
		return sqlca.sqlcode;
	} else {
		LogWrite_C(DebugParms, LOG_ERROR, "%s(): SQL Error %d\n", 2, __func__, sqlca.sqlcode);
		return sqlca.sqlcode;
	}
	EXEC SQL CLOSE cLEPSVM;

	return 0;
}
//--
EXPORT int __stdcall Ora_getCoreThreadId(tDebugInfo* DebugParms, int pid, int testid, int DatasetId, int LayerId, int CoreId) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = DebugParms->DebugDB->DBCtx; 
	char stmt[1000];
	int Ctid;
	EXEC SQL END   DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) printf("%s() could not connect to Log Database...\n", __func__);
		vCtx = DebugParms->DebugDB->DBCtx;
	}

	sprintf(&stmt[0], "select ThreadId from EngineThreads where ProcessId=%d and TestId=%d and DatasetId=%d and LayerId=%d and CoreId=%d", pid, testid, DatasetId, LayerId, CoreId);
	//-- Executes SQL 
	vCtx = DebugParms->DebugDB->DBCtx;
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL PREPARE sCtid FROM : stmt;
	EXEC SQL DECLARE cCtid CURSOR FOR sCtid;
	EXEC SQL OPEN cCtid;
	EXEC SQL FETCH cCtid INTO :Ctid;
	if (sqlca.sqlcode != 0) {
		LogWrite_C(DebugParms, LOG_ERROR, "%s(): SQL Error %d\n", 2, __func__, sqlca.sqlcode);
		return -1;
	}
	EXEC SQL CLOSE cCtid;

	return Ctid;
}
//--
EXPORT int __stdcall Ora_LoadCoreImage_NN(tDebugInfo* DebugParms, int pid, int tid, NN_Parms* NNParms, tNNWeight*** oNNWeight) {
	EXEC SQL BEGIN DECLARE SECTION;
	int retval = 0;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	//-- Network Weights variables
	int vNeuronLevel; int vFromNeuron; int vToNeuron;
	double vW; double vdW; double vdJdW;
	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) printf("%s() could not connect to Log Database...\n", __func__);
		vCtx = DebugParms->DebugDB->DBCtx;
	}

	//-- Load Network Weights from CoreImage_NN
	sprintf(&stmt[0], "select NeuronLevel, FromNeuron, ToNeuron, EndW, EnddW, EnddJdW from CoreImage_NN where ProcessId=%d and ThreadId=%d order by 1,2,3", pid, tid);
	LogWrite_C(DebugParms, LOG_INFO, "%s() CheckPoint 3 - stmt=%s\n", 2, __func__, stmt);
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL PREPARE sLINN FROM : stmt;
	EXEC SQL DECLARE cLINN CURSOR FOR sLINN;
	EXEC SQL OPEN cLINN;
	while (TRUE) {
		EXEC SQL FETCH cLINN INTO vNeuronLevel, vFromNeuron, vToNeuron, vW, vdW, vdJdW;
		if (sqlca.sqlcode == 0) {
			oNNWeight[vNeuronLevel][vFromNeuron][vToNeuron].Weight = vW;
			oNNWeight[vNeuronLevel][vFromNeuron][vToNeuron].dW = vdW;
			oNNWeight[vNeuronLevel][vFromNeuron][vToNeuron].dJdW = vdJdW;
		}
		else if (sqlca.sqlcode == 1403) {
			break;
		}
		else {
			LogWrite_C(DebugParms, LOG_ERROR, "%s(): SQL Error %d\n", 2, __func__, sqlca.sqlcode);
			retval = sqlca.sqlcode;
			break;
		}
	}
	EXEC SQL CLOSE cLINN;

	return retval;
}
EXPORT int __stdcall Ora_LoadCoreImage_SOM(tDebugInfo* DebugParms, int pid, int tid, SOM_Parms* SOMParms, tSOMWeight** oSOMWeight) {
	EXEC SQL BEGIN DECLARE SECTION;
	int retval = 0;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	//-- Network Weights variables
	int vFromNeuron; int vToNeuron; double vWeight;
	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) printf("%s() could not connect to Log Database...\n", __func__);
		vCtx = DebugParms->DebugDB->DBCtx;
	}

	//-- Load Network Weights from CoreImage_NN
	sprintf(&stmt[0], "select FromNeuron, ToNeuron, Weight from CoreImage_SOM where ProcessId=%d and ThreadId=%d order by 1,2,3", pid, tid);
	LogWrite_C(DebugParms, LOG_INFO, "%s() CheckPoint 3 - stmt=%s\n", 2, __func__, stmt);
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL PREPARE sLISOM FROM : stmt;
	EXEC SQL DECLARE cLISOM CURSOR FOR sLISOM;
	EXEC SQL OPEN cLISOM;
	while (TRUE) {
		EXEC SQL FETCH cLISOM INTO vFromNeuron, vToNeuron, vWeight;
		if (sqlca.sqlcode == 0) {
			oSOMWeight[vFromNeuron][vToNeuron].Weight = vWeight;
		}
		else if (sqlca.sqlcode == 1403) {
			break;
		}
		else {
			LogWrite_C(DebugParms, LOG_ERROR, "%s(): SQL Error %d\n", 2, __func__, sqlca.sqlcode);
			retval = sqlca.sqlcode;
			break;
		}
	}
	EXEC SQL CLOSE cLISOM;

	return retval;
}
EXPORT int __stdcall Ora_LoadCoreImage_SVM(tDebugInfo* DebugParms, int pid, int tid, SVM_Parms* SVMParms, tSVMWeight** oSVMWeight) {
	EXEC SQL BEGIN DECLARE SECTION;
	int retval = 0;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	//-- Support Vector variables
	int vSVid; int vVarId; double vWeight;
	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) printf("%s() could not connect to Log Database...\n", __func__);
		vCtx = DebugParms->DebugDB->DBCtx;
	}

	//-- Load Support Vectors from CoreImage_SVM
	sprintf(&stmt[0], "select SVid, VarId, Weight from CoreImage_SVM where ProcessId=%d and ThreadId=%d order by 1,2,3", pid, tid);
	LogWrite_C(DebugParms, LOG_INFO, "%s() CheckPoint 3 - stmt=%s\n", 2, __func__, stmt);
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL PREPARE sLISVM FROM : stmt;
	EXEC SQL DECLARE cLISVM CURSOR FOR sLISVM;
	EXEC SQL OPEN cLISVM;
	while (TRUE) {
		EXEC SQL FETCH cLISVM INTO vSVid, vVarId, vWeight;
		if (sqlca.sqlcode == 0) {
			oSVMWeight[vSVid][vVarId].Weight = vWeight;
		} else if (sqlca.sqlcode == 1403) {
			break;
		} else {
			LogWrite_C(DebugParms, LOG_ERROR, "%s(): SQL Error %d\n", 2, __func__, sqlca.sqlcode);
			retval = sqlca.sqlcode;
			break;
		}
	}
	EXEC SQL CLOSE cLISVM;

	return retval;
}
//--
EXPORT int __stdcall Ora_LoadCoreLogs_SVM(tDebugInfo* DebugParms, int pid, int tid, SVM_Parms* SVMParms, tSVMResult* oSVMResult) {
	EXEC SQL BEGIN DECLARE SECTION;
	int retval = 0;
	sql_context vCtx = DebugParms->DebugDB->DBCtx;
	char stmt[1000];
	//-- SVM Training Results variables
	double vThresholdB, vMaxDiff, vL1Loss, vWVNorm, vLevNorm;
	int vSVCount, vKevCount;
	EXEC SQL END DECLARE SECTION;

	//-- Connects to DB only once
	if (vCtx == NULL) {
		if (OraConnect(DebugParms, DebugParms->DebugDB) != 0) printf("%s() could not connect to Log Database...\n", __func__);
		vCtx = DebugParms->DebugDB->DBCtx;
	}

	//-- 2. Load SVM Training results from CoreLogs_SVM
	sprintf(&stmt[0], "select SVCount, ThresholdB, MaxDiff, L1Loss, WVNorm, LevNorm, KevCount from CoreLogs_SVM where ProcessId=%d and ThreadId=%d", pid, tid);
	LogWrite_C(DebugParms, LOG_INFO, "%s() CheckPoint 3 - stmt=%s\n", 2, __func__, stmt);
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL PREPARE sLISVM FROM : stmt;
	EXEC SQL DECLARE cLISVM2 CURSOR FOR sLISVM;
	EXEC SQL OPEN cLISVM2;
	EXEC SQL FETCH cLISVM2 INTO vSVCount, vThresholdB, vMaxDiff, vL1Loss, vWVNorm, vLevNorm, vKevCount;
	if (sqlca.sqlcode == 0) {
		oSVMResult->SVcount = vSVCount;
		oSVMResult->ThresholdB = vThresholdB;
		oSVMResult->maxdiff = vMaxDiff;
		oSVMResult->L1loss = vL1Loss;
		oSVMResult->WVnorm = vWVNorm;
		oSVMResult->LEVnorm = vLevNorm;
		oSVMResult->KEvCount = vKevCount;
	} else {
		LogWrite_C(DebugParms, LOG_ERROR, "%s(): SQL Error %d\n", 2, __func__, sqlca.sqlcode);
		retval = sqlca.sqlcode;
	}
	EXEC SQL CLOSE cLISVM2;

	return retval;
}

//=== Queries
EXPORT int __stdcall SymbolLookup(tDebugInfo* DebugParms, sql_context pCtx, char* pSymbol, char* oSymbol, int* oScale){

	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = pCtx;
	char* SymLkp_stmt_base;
	char SymLkp_stmt[300];
	char vSymbol[10];
	char* pScale_stmt_base;
	char  pScale_stmt[300];
	int vpScale;
	EXEC SQL END DECLARE SECTION;

	SymLkp_stmt_base = "select Hst_Symbol from History.Symbol_Lookup where MT4_Symbol='";
	strcpy(SymLkp_stmt, SymLkp_stmt_base);
	strcat(SymLkp_stmt, pSymbol);
	strcat(SymLkp_stmt, "'");
	LogWrite_C(DebugParms, LOG_INFO, "%s SymbolLookup executing: %s\n", 2, timestamp_C, SymLkp_stmt);
	//EXEC SQL ALTER SESSION SET SQL_TRACE=TRUE;
	EXEC SQL CONTEXT USE :vCtx;
	EXEC SQL PREPARE s5 FROM :SymLkp_stmt;
	EXEC SQL DECLARE c5 CURSOR FOR s5;
	EXEC SQL OPEN c5;
	EXEC SQL FETCH c5 INTO :vSymbol;
	if (sqlca.sqlcode != 0){
		LogWrite_C(DebugParms, LOG_INFO, "SymbolLookup: SQL Error %d\n", 1, sqlca.sqlcode);
		return sqlca.sqlcode;
	}
	EXEC SQL CLOSE c5;
	//EXEC SQL ALTER SESSION SET SQL_TRACE=FALSE;
	LogWrite_C(DebugParms, LOG_INFO, "%s SymbolLookup found symbol: %s\n", 2, timestamp_C, vSymbol);

	// Then, Look for pScale
	pScale_stmt_base = "select pScale from GridUser.Pairs where Symbol='";
	strcpy(pScale_stmt, pScale_stmt_base);
	Trim_C(vSymbol); strcat(pScale_stmt, vSymbol);
	strcat(pScale_stmt, "'");
	LogWrite_C(DebugParms, LOG_INFO, "%s SymbolLookup executing: %s\n", 2, timestamp_C, pScale_stmt);

	EXEC SQL PREPARE s6 FROM :pScale_stmt;
	EXEC SQL DECLARE c6 CURSOR FOR s6;
	EXEC SQL OPEN c6;
	EXEC SQL FETCH c6 INTO :vpScale;
	if (sqlca.sqlcode != 0){
		LogWrite_C(DebugParms, LOG_ERROR, "GetpScale: SQL Error %d\n", 1, sqlca.sqlcode);
		return sqlca.sqlcode;
	}
	EXEC SQL CLOSE c6;
	LogWrite_C(DebugParms, LOG_INFO, "%s SymbolLookup found pScale= %d\n", 2, timestamp_C, vpScale);

	Trim_C(vSymbol);  strcpy(oSymbol, vSymbol);
	(*oScale) = vpScale;

	return 0;
}
EXPORT int __stdcall FindBestPredictor(tDebugInfo* DebugParms, sql_context pCtx, char* vCSymbol, char* vHSymbol, char* vTimeFrame, int vIsFilled, char* pCurrentStart, int vTotalBars, char* vMeasure, int vOutputType, int pPredictorsCount, tPredictor* pBestPredictor){

	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = pCtx;
	char* stmt_base;
	char stmt[400];
	char vTotalBarsBuffer[3 + 1];
	int pr_id;
	int vPredictorLen = 0;
	char vPredictorStart[12 + 1];
	char vPredictorMeasure[4 + 1];
	EXEC SQL END DECLARE SECTION;
	LogWrite_C(DebugParms, LOG_INFO, "%s FindBestPredictor(%s) started.\n", 2, timestamp_C, (vOutputType == FH) ? "High" :"Low");

	stmt_base = "select to_char(PredictorStart,'YYYYMMDDHH24MI'), PatternLength, ";
	strcpy(&stmt[0], stmt_base);
	strcat(&stmt[0], vMeasure);
	strcat(&stmt[0], " from TConcordance where CurrentData='");
	strcat(&stmt[0], vCSymbol);
	strcat(&stmt[0], "' and CurrentStart=to_date('");
	strcat(&stmt[0], pCurrentStart);
	strcat(&stmt[0], "','YYYYMMDDHH24MI')");
	strcat(&stmt[0], "  and TimeFrame='");
	strcat(&stmt[0], vTimeFrame);
	strcat(&stmt[0], "'  and OutputType='");
	strcat(&stmt[0], (vOutputType == 1) ? "High" :"Low");
	strcat(&stmt[0], "' and PredictorData='");
	strcat(&stmt[0], vHSymbol);
	strcat(&stmt[0], "' and ");
	strcat(&stmt[0], vMeasure);
	strcat(&stmt[0], "<1");
	strcat(&stmt[0], " and PatternLength=");
	sprintf(vTotalBarsBuffer, "%d", vTotalBars);				strcat(&stmt[0], vTotalBarsBuffer);
	strcat(&stmt[0], " order by 3 desc");
	LogWrite_C(DebugParms, LOG_INFO, "%s FindBestPredictor(%s)  Executing stmt=%s\n", 3, timestamp_C, (vOutputType == FH)?"High":"Low", stmt);

	EXEC SQL CONTEXT USE :vCtx;
	EXEC SQL PREPARE S FROM :stmt;
	EXEC SQL DECLARE c3 CURSOR FOR S;
	EXEC SQL OPEN c3;
	if (sqlca.sqlcode != 0){
		LogWrite_C(DebugParms, LOG_INFO, "%s FindBestPredictor: Error raised by stmt: %d\n", 2, timestamp_C, sqlca.sqlcode);
		return sqlca.sqlcode;
	}
	//=========================================================================================================================================
	for (pr_id = 0; pr_id<pPredictorsCount; pr_id++){
		EXEC SQL FETCH c3 INTO :vPredictorStart, :vPredictorLen, :vPredictorMeasure;
		if (sqlca.sqlcode != 0){
			LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
			return sqlca.sqlcode;
		}
		pBestPredictor[pr_id].PredType = vOutputType;
		strcpy(pBestPredictor[pr_id].PredStart, vPredictorStart);
		pBestPredictor[pr_id].PredLen = vPredictorLen;
		LogWrite_C(DebugParms, LOG_INFO, "%s FindBestPredictor(%s) found top %d predictor. PredStart=%s \n", 4, timestamp_C, (vOutputType == FH) ? "High" : "Low", pr_id, pBestPredictor[pr_id].PredStart);
	}
	EXEC SQL CLOSE c3;
	return sqlca.sqlcode;

}
EXPORT int __stdcall GetCharPFromQuery(tDebugInfo* DebugParms, sql_context pCtx, char* pSQL, char* oRet){
	EXEC SQL BEGIN DECLARE SECTION;
	char stmt[1000];
	char vRet[1000];
	sql_context vCtx = pCtx;
	EXEC SQL END   DECLARE SECTION;
	strcpy(stmt, pSQL);

	EXEC SQL CONTEXT USE :vCtx;
	EXEC SQL PREPARE s8 FROM :stmt;
	EXEC SQL DECLARE c8 CURSOR FOR s8;
	EXEC SQL OPEN c8;
	if (sqlca.sqlcode != 0){
		LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}
	EXEC SQL FETCH c8 INTO :vRet;
	if (sqlca.sqlcode != 0){
		LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}
	Trim_C(vRet); strcpy(oRet, vRet);
	EXEC SQL CLOSE c8;
	return sqlca.sqlcode;
}
EXPORT int __stdcall GetStringArrayFromQuery(tDebugInfo* DebugParms, sql_context pCtx, char* pSQL, int ArrLen, char** oRet){
	EXEC SQL BEGIN DECLARE SECTION;
	char stmt[1000];
	char vRet[1000];
	sql_context vCtx = pCtx;
	EXEC SQL END   DECLARE SECTION;
	strcpy(stmt, pSQL);

	EXEC SQL CONTEXT USE :vCtx;
	EXEC SQL PREPARE s82 FROM :stmt;
	EXEC SQL DECLARE c82 CURSOR FOR s82;
	EXEC SQL OPEN c82;
	if (sqlca.sqlcode != 0){
		LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}
	for(int i=0;i<ArrLen;i++){
		EXEC SQL FETCH c82 INTO :vRet;
		if (sqlca.sqlcode != 0){
			LogWrite_C(DebugParms, LOG_ERROR, "GetStringArrayFromQuery: SQL Error %d\n", 1, sqlca.sqlcode);
			return sqlca.sqlcode;
		}
		Trim_C(vRet); strcpy(oRet[i], vRet);
	}
	EXEC SQL CLOSE c82;
	return sqlca.sqlcode;
}
EXPORT int __stdcall GetIntFromQuery(tDebugInfo* DebugParms, sql_context pCtx, char* pSQL, int* oRet){
	EXEC SQL BEGIN DECLARE SECTION;
	char stmt[1000];
	int vRet = 0;
	sql_context vCtx = pCtx;
	EXEC SQL END   DECLARE SECTION;
	strcpy(stmt, pSQL);

	EXEC SQL CONTEXT USE :vCtx;
	EXEC SQL PREPARE s1 FROM :stmt;
	EXEC SQL DECLARE c1 CURSOR FOR s1;
	EXEC SQL OPEN c1;
	EXEC SQL FETCH c1 INTO :vRet;

	if (sqlca.sqlcode != 0){
		LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}

	(*oRet) = vRet;
	EXEC SQL CLOSE c1;
	return sqlca.sqlcode;
}
EXPORT int __stdcall GetBarsFromQuery(tDebugInfo* DebugParms, sql_context pCtx, char* pSQL, int pRecCount, int pSkipFirstN, tBar* oBar){
	EXEC SQL BEGIN DECLARE SECTION;
	int i = 0;  int j;
	int retval = 0;
	char vNDT[12 + 1];
	//sql_context vCtx = pCtx;
	struct sBar{
		char NewDateTime[12 + 1];
		double Open;
		double High;
		double Low;
		double Close;
		double OpenD;
		double HighD;
		double LowD;
		double CloseD;
		double Volume;
		double VolumeD;
	} *vBar;
	char stmt[1000];
	EXEC SQL END DECLARE SECTION;
	vBar = (struct sBar*)malloc((pRecCount + pSkipFirstN)*sizeof(struct sBar));
	strcpy(stmt, pSQL);

	EXEC SQL CONTEXT USE :pCtx;
	EXEC SQL PREPARE s4 FROM :stmt;
	EXEC SQL DECLARE c4 CURSOR FOR s4;
	EXEC SQL OPEN c4;
	for (i = 0; i<(pRecCount + pSkipFirstN); i++){
		EXEC SQL FETCH c4 INTO :vNDT, :vBar[i].Open, :vBar[i].High, :vBar[i].Low, :vBar[i].Close, :vBar[i].Volume;
		if (sqlca.sqlcode == 0){
			strcpy(vBar[i].NewDateTime, vNDT);
		}
		else if (sqlca.sqlcode == 1403){
			break;
		}
		else{
			LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
			retval = sqlca.sqlcode;
			break;
		}
	}
	EXEC SQL CLOSE c4;

	if (i > 0) {
		for (j = 0; j < pRecCount; j++){
			memcpy(&oBar[j], &vBar[pSkipFirstN + j], sizeof(tBar));
		}
	}
	free(vBar);
	return retval;
}
EXPORT int __stdcall GetBarsFromQuery2(tDebugInfo* DebugParms, sql_context pCtx, char* pSQL, int* pRecCount, tBar* oBar){
	EXEC SQL BEGIN DECLARE SECTION;
	int i = 0;
	int retval = 0;
	double tmpd;
	sql_context vCtx = pCtx;

	char vNDT[12 + 1];
	double vOpen; double vHigh; double vLow; double vClose; double vOpenD; double vHighD; double vLowD; double vCloseD;

	char stmt[1000];
	EXEC SQL END DECLARE SECTION;

	strcpy(stmt, pSQL);
	EXEC SQL CONTEXT USE :vCtx;
	EXEC SQL PREPARE s9 FROM :stmt;
	EXEC SQL DECLARE c9 CURSOR FOR s9;
	EXEC SQL OPEN c9;
	for (i = 0; i<(*pRecCount); i++){
		EXEC SQL FETCH c9 INTO :vNDT, :vOpen, :vHigh, :vLow, :vClose, :vOpenD, :vHighD, :vLowD, :vCloseD;
		if (sqlca.sqlcode == 0){
			strcpy(oBar[i].NewDateTime, vNDT);
			oBar[i].Open = vOpen; oBar[i].OpenD = vOpenD;
			oBar[i].High = vHigh; oBar[i].HighD = vHighD;
			oBar[i].Low = vLow; oBar[i].LowD = vLowD;
			oBar[i].Close = vClose; oBar[i].CloseD = vCloseD;
		}
		else if (sqlca.sqlcode == 1403){
			(*pRecCount) = i;
			break;
		}
		else{
			LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
			retval = sqlca.sqlcode;
			(*pRecCount) = i;
			break;
		}
	}
	EXEC SQL CLOSE c9;

	for (i = 0; i < (*pRecCount) / 2; i++){
		tmpd = oBar[(*pRecCount) - i].Open;
		oBar[(*pRecCount) - i].Open = oBar[i].Open;
		oBar[i].Open = tmpd;
	}

	return retval;
}
//===

//=== ConcordanceCalc() stuff
EXPORT int __stdcall GetHRecCount(tDebugInfo* DebugParms, void* pCtx, char* pHSymbol, char* pTimeFrame, char* pCFromDate, int pDelta, int pIsFilled, int* HRecCount){
	//--- Select... 
	char stmt[1000];
	strcpy(stmt, "select count(*) from History.");
	strcat(stmt, pHSymbol);
	strcat(stmt, "_");
	strcat(stmt, pTimeFrame);
	strcat(stmt, (pIsFilled == 1) ? "_FILLED " : " ");
	strcat(stmt, "where NewDateTime < to_date('");
	strcat(stmt, pCFromDate);
	strcat(stmt, "','YYYYMMDDHH24MI')");

	return(GetIntFromQuery(DebugParms, pCtx, stmt, HRecCount));

}
EXPORT int __stdcall LoadCurrentRecord(tDebugInfo* DebugParms, void* pCtx, char* pCSymbol, char* pTimeFrame, char* pCToDate, int pPastDepth, int pDelta, int pIsFilled, int pCRecCount, tBar* oCRec){
	char stmt[1000];
	char vPastDepth[4];

	strcpy(stmt, "select * from (");
	strcat(stmt, "select to_char(NewDateTime, 'YYYYMMDDHH24MI'), Open, High, Low, Close, Open-nvl(lag(Open) over(order by NewDateTime), 0), High-nvl(lag(High) over(order by NewDateTime), 0), Low-nvl(lag(Low) over(order by NewDateTime), 0), Close-nvl(lag(Close) over(order by NewDateTime), 0) from History.");
	strcat(stmt, pCSymbol);
	strcat(stmt, "_");
	strcat(stmt, pTimeFrame);
	strcat(stmt, (pIsFilled == 1) ? "_FILLED " : " ");
	strcat(stmt, "where NewDateTime <= to_date('");
	strcat(stmt, pCToDate);
	strcat(stmt, "','YYYYMMDDHH24MI') order by NewDateTime desc");
	strcat(stmt, ") where rownum<=");
	sprintf(&vPastDepth[0], "%d", pPastDepth);
	strcat(stmt, vPastDepth);
	strcat(stmt, " order by 1");
	//LogWrite_C(pDebugLevel, pLogFile, "%s LoadCurrentRecord() executing: %s\n", 2, timestamp_C, stmt);

	return (GetBarsFromQuery(DebugParms, pCtx, stmt, pPastDepth, 0, oCRec));
}
EXPORT int __stdcall LoadHistoryRecord(tDebugInfo* DebugParms, void* pCtx, char* pCSymbol, char* pTimeFrame, char* pCFromDate, int pDelta, int pIsFilled, int pHRecCount, tBar* oHRec){
	char stmt[1000];

	strcpy(stmt, "select to_char(NewDateTime, 'YYYYMMDDHH24MI'), Open, High, Low, Close, Open-nvl(lag(Open) over(order by NewDateTime), 0), High-nvl(lag(High) over(order by NewDateTime), 0), Low-nvl(lag(Low) over(order by NewDateTime), 0), Close-nvl(lag(Close) over(order by NewDateTime), 0) from History.");
	strcat(stmt, pCSymbol);
	strcat(stmt, "_");
	strcat(stmt, pTimeFrame);
	strcat(stmt, (pIsFilled == 1) ? "_FILLED " : " ");
	strcat(stmt, "where NewDateTime < to_date('");
	strcat(stmt, pCFromDate);
	strcat(stmt, "','YYYYMMDDHH24MI') order by 1");

	return (GetBarsFromQuery(DebugParms, pCtx, stmt, pHRecCount, 0, oHRec));
}
EXPORT int __stdcall LoadTimeSeries(tDebugInfo* DebugParms, void* pCtx, char* pSymbol, char* pTimeFrame, char* pFromDate, int pDelta, int pIsFilled, int pRecCount, tBar* oRec){
	char stmt[1000];

	strcpy(stmt, "select to_char(NewDateTime, 'YYYYMMDDHH24MI'), Open, High, Low, Close, Open-nvl(lag(Open) over(order by NewDateTime), 0), High-nvl(lag(High) over(order by NewDateTime), 0), Low-nvl(lag(Low) over(order by NewDateTime), 0), Close-nvl(lag(Close) over(order by NewDateTime), 0) from History.");
	strcat(stmt, pSymbol);
	strcat(stmt, "_");
	strcat(stmt, pTimeFrame);
	strcat(stmt, (pIsFilled == 1) ? "_FILLED " : " ");
	strcat(stmt, "where NewDateTime >= to_date('");
	strcat(stmt, pFromDate);
	strcat(stmt, "','YYYYMMDDHH24MI') order by 1");

	return (GetBarsFromQuery(DebugParms, pCtx, stmt, pRecCount, 0, oRec));
}
//===

//=== OBSOLETE STUFF ===
EXPORT int  __stdcall OraInsert(tDebugInfo* DebugParms, sql_context pCtx, char* pSQL) {
	EXEC SQL BEGIN DECLARE SECTION;
	char* vCtx = pCtx;
	char* stmt = pSQL;
	EXEC SQL END   DECLARE SECTION;

	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL ALTER SESSION SET NLS_DATE_FORMAT = 'YYYYMMDDHH24MI';
	EXEC SQL EXECUTE IMMEDIATE : stmt;

	if (sqlca.sqlcode == 0) {
		EXEC SQL COMMIT;
		return 0;
	}
	else {
		LogWrite_C(DebugParms, LOG_ERROR, "%s failed. SQL Error %d ; stmt = %s\n", 3, __func__, sqlca.sqlcode, stmt);
		return sqlca.sqlcode;
	}


}
EXPORT void __stdcall OraAllocateCtx(sql_context pCtx[MAX_CONTEXTS]) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx[6];
	EXEC SQL END   DECLARE SECTION;
	for (int i = 0; i < MAX_CONTEXTS; i++) {
		EXEC SQL CONTEXT ALLOCATE : vCtx[i];
		pCtx[i] = vCtx[i];
	}
	return;
}
EXPORT void __stdcall OraEnableThreads() {
	EXEC SQL ENABLE THREADS;
	return;
}
EXPORT void __stdcall OraContextFree(sql_context pCtx) {
	EXEC SQL BEGIN DECLARE SECTION;
	sql_context vCtx = pCtx;
	EXEC SQL END   DECLARE SECTION;
	EXEC SQL CONTEXT USE : vCtx;
	EXEC SQL COMMIT WORK RELEASE;
	EXEC SQL CONTEXT FREE : vCtx;
}


//===
